{"version":3,"file":"static/js/673.afb43239.chunk.js","mappings":"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","sources":["components/popup/EditProfilePopup.js","components/container/Header.js","components/container/Page.js","pages/App.js"],"sourcesContent":["// React Package Module\r\nimport { useMemo, useState, useRef, useEffect } from \"react\";\r\n\r\n// MUI Package Module\r\nimport { Box, styled } from \"@mui/material\";\r\n\r\n// Control Component\r\nimport Buttons from \"components/controls/Button\";\r\n\r\n// Constant\r\nimport { MESSAGE, LABEL, CODE } from \"../../common\";\r\n\r\n// TextField Component\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\n// API Service\r\nimport { patchData } from \"common/communication\";\r\n\r\n// Util\r\nimport { pwValidation } from \"common/util\";\r\n\r\n/** STYLE 정의 */\r\n// 전체 영역\r\nconst Wrapper = styled(Box)({\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\",\r\n  padding: \"0px 20px 20px 20px\"\r\n});\r\n\r\nconst Text = styled(TextField)({\r\n  width: \"100%\",\r\n  \"& .MuiInputBase-input\": {\r\n    height: 20,\r\n    fontSize: 14,\r\n    marginTop: 8\r\n  },\r\n});\r\n\r\nconst ButtonBox = styled(Box)({\r\n  width: \"100%\",\r\n  display: 'flex',\r\n  justifyContent: 'flex-end',\r\n});\r\n\r\nconst fileUploaderBtn =  {\r\n  backgroundColor: \"white\",\r\n  color: \"black\",\r\n  border: \"none\", \r\n  cursor: \"pointer\",\r\n  display: \"block\",\r\n  margin: \"0 auto\",\r\n  fontSize: 15\r\n};\r\n\r\n/** 내 정보 수정 컴포넌트 (헤더의 내 정보 버튼 클릭 시 해당 팝업 띄워줌)*/\r\nconst EditProfile = (props) => {\r\n  // 구조 분해 할당 이용하여 props 분해\r\n  const { closeModal } = props;\r\n  \r\n  // STATE 정의\r\n  const [profile, setProfile] = useState(JSON.parse(localStorage.getItem(\"profile\")));\t// 유저 정보\r\n  const [newPw, setNewPw] = useState(\"\"); \t\t\t\t\t\t\t\t\t\t\t\t// 새 비밀번호\r\n  const [curPw, setCurPw] = useState(\"\"); \t\t\t\t\t\t\t\t\t\t\t\t// 현재 비밀번호\r\n  const [nickname, setNickname] = useState(profile.user_nickname); \t\t\t\t\t\t// 로컬스토리지에 저장된 사용자 닉네임\r\n  const [img, setImg] = useState(); \t\t\t\t\t\t\t\t\t\t\t\t\t// 사용자 프로필 이미지\r\n  const [confirmNewPwRegMsg, setConfirmNewPwRegMsg] = useState(\"\"); \t\t\t\t\t// 비밀번호 변경 시 새 비밀번호와 새 비밀번호 확인의 값이 다를 경우 띄워주는 에러 메세지\r\n  const [pwRegMsg, setPwRegMsg] = useState(\"\"); \t\t\t\t\t\t\t\t\t\t// 비밀번호 유효성 검사 미통과 시 띄워주는 에러 메세지\r\n  const [nickNameRegMsg, setNickNameRegMsg] = useState(\"\"); \t\t\t\t\t\t\t// 닉네임 유효성 검사 미통과 시 띄워주는 에러 메세지\r\n  const [info, setInfo] = useState(\"\"); \t\t\t\t\t\t\t\t\t\t\t\t// 작가 소개\r\n  const [isAuthor, setIsAuthor] = useState(\r\n    profile.user_reg_dv === \"W\" ? true : false\r\n  );\r\n  const [selectedFileName, setSelectedFileName] = useState(\"\");   // 사용자가 선택한 프로필 사진 이름\r\n  const [previewUrl, setPreviewUrl] = useState(\"\");\r\n\r\n  const imageUrl = useMemo(() => {\r\n\tif (previewUrl !== \"\") {\r\n\t\treturn previewUrl;\r\n\t} else {\r\n\t\treturn `${process.env.REACT_APP_IMAGE_DIRECTORY}/${profile.image}?${Date.now()}`;\r\n\t}\r\n  }, [profile.image, previewUrl]);\r\n\r\n  /** Input 입력 */\r\n  // 닉네임\r\n  const inputNickname = (e) => {\r\n    setNickname(e.target.value);\r\n  };\r\n  // 현재 비밀번호\r\n  const inputCurPw = (e) => {\r\n    setCurPw(e.target.value);\r\n  };\r\n  // 새 비밀번호\r\n  const inputNewPw = (e) => {\r\n    setNewPw(e.target.value);\r\n  };\r\n  // 작가 소개\r\n  const inputInfo = (e) => {\r\n    setInfo(e.target.value);\r\n  };\r\n\r\n  // 닉네임 글자수 제한 유효성 검사\r\n  const nickNameValidation = /^.{1,12}$/;\r\n\r\n  // 닉네임 유효성 검사\r\n  const nickNameValidate = (e) => {\r\n    if (!nickNameValidation.test(e.target.value)) {\r\n      setNickNameRegMsg(MESSAGE.ERROR.NICKNAME_INVALIDATION);\r\n    } else {\r\n      setNickNameRegMsg(\"\");\r\n    }\r\n  };\r\n\r\n  // 비밀번호 확인 유효성 검사\r\n  const confirmNewPassword = (e) => {\r\n    if (e.target.value !== newPw) {\r\n      setConfirmNewPwRegMsg(MESSAGE.ERROR.CONFIRM_NEW_PW);\r\n    } else {\r\n      setConfirmNewPwRegMsg(\"\");\r\n    }\r\n  };\r\n\r\n  const validation = () => {\r\n    setPwRegMsg(pwValidation(newPw));\r\n  };\r\n\r\n  // 프로필 수정\r\n  const onEditProfile = () => {\r\n\t\t// 현재 비밀번호 미입력 시\r\n\t\tif (curPw === \"\") {\r\n\t\t\talert(MESSAGE.WRITE_CUR_PW);\r\n\t\t\treturn;\r\n\t\t} else if (info.length > 50) {\r\n      alert(MESSAGE.ERROR.INFO_INVALIDATION);\r\n      return;\r\n    }\r\n\r\n\t\t// 이미지 파일의 경우 json에 그냥 담는게 아니라 formData 형태로 만들어줘야 하니 formData를 선언하고 그 폼데이터안에 데이터와 이미지 파일 정보를 넣어서 사용\r\n\t\tconst data = {\r\n\t\t\tlogin_id: profile.login_id,\r\n\t\t\tuser_nickname: nickname,\r\n\t\t\tcurrent_pw: curPw,\r\n\t\t\tnew_pw: newPw,\r\n\t\t\tfile: img,\r\n\t\t\tauthor_info: info,\r\n\t\t\tisAuthor: isAuthor,\r\n\t\t\told_img_name: profile.image,\r\n\t\t};\r\n\r\n\t\t// 폼 데이터 변수 선언\r\n\t\tconst formData = new FormData();\r\n\r\n\t\t// data의 각 key값으로 formdata에 데이터 세팅\r\n\t\tObject.keys(data).forEach((key) => {\r\n\t\t\tformData.append(key, data[key]);\r\n\t\t});\r\n\t\t\tpatchData(\"auth/editProfile\", formData).then((data) => {\r\n\t\t\t\tif (typeof data === \"object\") {\r\n\t\t\t\t\tconst newData = JSON.stringify({\r\n\t\t\t\t\t\t...profile,\r\n\t\t\t\t\t\tuser_nickname: data.user_nickname,\r\n\t\t\t\t\t\timage: data.image,\r\n\t\t\t\t\t\tauthor_info: data.author_info,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tlocalStorage.setItem(\"profile\", newData);\r\n\t\t\t\t\tsetProfile(newData);\r\n\t\t\t\t\talert(MESSAGE.EDIT_SUCCEED);\r\n\t\t\t\t\tcloseModal();\r\n\t\t\t\t} else {\r\n\t\t\t\t\talert(data);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t};\r\n\r\n  // 파일 업로드 하는 input에 대한 참조를 저장하는 변수 (현재 참조 대상이 없음을 나타내기 위해 초기값 null로 세팅)\r\n  const fileInputRef = useRef(null);\r\n\r\n  // 파일 업로드 하는 input 클릭 했을 때 기능 함수 (현재 참조하는 요소 클릭하도록)\r\n  const fileUploadBtn = () => {\r\n    fileInputRef.current.click();\r\n  }\r\n\r\n  const fileChange = (e) => {\r\n\tconst file = e.target.files[0];\r\n\tsetImg(file);\r\n    setSelectedFileName(file.name); // 선택한 파일명 업데이트\r\n\r\n\tif (file) {\r\n\t\tconst reader = new FileReader();\r\n\t\treader.onloadend = () => {\r\n\t\t\tsetPreviewUrl(reader.result);\r\n\t\t};\r\n\t\treader.readAsDataURL(file);\r\n\t}\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Box\r\n        sx={{\r\n          width: 180,\r\n          height: 180,\r\n          borderRadius: \"50%\",\r\n          margin: \"0 auto\",\r\n          marginTop: 4,\r\n          marginBottom: 2,\r\n          backgroundImage: `url(${imageUrl})`,\r\n          backgroundSize: \"cover\",\r\n        }}\r\n      />\r\n\r\n      {/* 파일 하나만 선택하도록 할 것이기 때문에 files의 0번째 배열을 직접적으로 가져옴 */}\r\n      {/* input 태그 내장 매서드 사용하여 확장자 제한 */}\r\n      <input\r\n        type=\"file\"\r\n        accept=\"image/jpg, image/jpeg, image/png\"\r\n        onChange={(e) => fileChange(e)}\r\n        style={{ display: \"none\" }}\r\n        ref={fileInputRef}\r\n      />\r\n      {/* 사용자가 선택한 파일명 */}\r\n      {selectedFileName && (\r\n        <p style={{ fontSize: 12, textAlign: \"center\", margin: \"0 auto\" }}>\r\n          {selectedFileName}\r\n        </p>\r\n      )}\r\n      {/* 커스텀한 파일 업로더 버튼 */}\r\n      <button onClick={fileUploadBtn} style={fileUploaderBtn}>\r\n        {LABEL.BUTTONS.UPLOAD_IMAGE}\r\n      </button>\r\n\r\n      <Text\r\n        id=\"standard-read-only-input\"\r\n        InputProps={{\r\n          readOnly: true,\r\n        }}\r\n        variant=\"standard\"\r\n        placeholder={profile.login_id}\r\n      />\r\n      <Text\r\n        id=\"standard-basic\"\r\n        variant=\"standard\"\r\n        defaultValue={profile.user_nickname}\r\n        onChange={inputNickname}\r\n        onBlur={nickNameValidate}\r\n        helperText={nickNameRegMsg !== \"\" ? nickNameRegMsg : \"\"}\r\n      />\r\n      <Text\r\n        id=\"standard-basic\"\r\n        variant=\"standard\"\r\n        placeholder={LABEL.INPUT.PLACE_HOLDER.CURRENT_PW}\r\n        onChange={inputCurPw}\r\n        type=\"password\"\r\n      />\r\n      <Text\r\n        id=\"standard-basic\"\r\n        variant=\"standard\"\r\n        placeholder={LABEL.INPUT.PLACE_HOLDER.NEW_PW}\r\n        onChange={inputNewPw}\r\n        type=\"password\"\r\n        onBlur={() => validation()}\r\n        value={newPw}\r\n        helperText={pwRegMsg}\r\n      />\r\n      <Text\r\n        id=\"standard-basic\"\r\n        variant=\"standard\"\r\n        placeholder={LABEL.INPUT.PLACE_HOLDER.NEW_PW_REPEAT}\r\n        type=\"password\"\r\n        onBlur={confirmNewPassword}\r\n        helperText={confirmNewPwRegMsg !== \"\" ? confirmNewPwRegMsg : \"\"}\r\n      />\r\n      {profile.user_reg_dv === \"W\" && (\r\n        <Text\r\n          id=\"standard-basic\"\r\n          variant=\"standard\"\r\n          defaultValue={profile.author_info}\r\n          onChange={inputInfo}\r\n          // onBlur={nickNameValidate}\r\n          // helperText={nickNameRegMsg !== \"\" ? nickNameRegMsg : \"\"}\r\n        />\r\n      )}\r\n      {/* <button type=\"submit\" onClick={onEditProfile}>\r\n\t\t\t\t{\" \"}\r\n\t\t\t\t완료{\" \"}\r\n\t\t\t</button> */}\r\n      <ButtonBox>\r\n        <Buttons\r\n          type={CODE.BUTTON.BASIC}\r\n          name={LABEL.BUTTONS.SUBMIT}\r\n          onEditProfile={onEditProfile}\r\n          margin={\"10px 0 0 auto\"}\r\n        />\r\n      </ButtonBox>\r\n    </Wrapper>\r\n  );\r\n};\r\nexport default EditProfile;","// React Package Module\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// MUI Package Module\r\nimport { Box, styled, Typography } from \"@mui/material\";\r\n\r\n// Control Component\r\nimport Buttons from \"components/controls/Button\";\r\n\r\n// Popup Component\r\nimport ModalPopup from \"components/popup/ModalPopup\";\r\nimport LoginPopup from \"components/popup/LoginPopup\";\r\nimport JoinPopup from \"components/popup/JoinPopup\";\r\nimport EditProfilePopup from \"components/popup/EditProfilePopup\";\r\n\r\n// Constant\r\nimport { CODE, LABEL, MESSAGE } from \"common\";\r\n\r\n// Util\r\nimport { modalWidth, modalHeight } from \"common/util\";\r\n\r\n/** STYLE 정의 */\r\n// 전체 영역\r\nconst Whole = styled(Box)({\r\n\theight: 70,\r\n\tdisplay: \"flex\",\r\n});\r\n\r\n// 최상단 로고 감싸는 영역\r\nconst LogoBox = styled(Box)({\r\n\theight: \"100%\",\r\n\tpaddingLeft: \"8%\",\r\n\tdisplay: \"flex\",\r\n});\r\n\r\n// 로고\r\nconst Logo = styled(Typography)({\r\n\tcolor: \"black\",\r\n\tfontSize: 27,\r\n\tfontWeight: \"bolder\",\r\n\talignSelf: \"center\",\r\n\tcursor: \"pointer\",\r\n});\r\n\r\n// 로고 제외 전체 영역\r\nconst MenuBar = styled(Box)({\r\n\tflexGrow: 1,\r\n\tmarginRight: \"5%\",\r\n\tjustifyContent: \"flex-end\",\r\n\tdisplay: \"flex\",\r\n});\r\n\r\n// 닉네임 포함 환영문구 영역\r\nconst WelcomeMsg = styled(Typography)({\r\n\tcolor: \"black\",\r\n\tfontSize: 15,\r\n\tmarginLeft: \"auto\",\r\n\tfontWeight: \"bolder\",\r\n\talignSelf: \"center\",\r\n\tmarginRight: 10,\r\n});\r\n\r\n// 메뉴 버튼 영역\r\nconst MenuBtnBox = styled(Box)({\r\n\tmarginRight: 50,\r\n\tdisplay: \"flex\",\r\n\tjustifyContent: \"flex-end\",\r\n\talignItems: \"center\",\r\n});\r\n\r\n/** 모든 페이지에 고정적으로 위치하는 헤더 (메뉴 버튼 포함) */\r\nconst Header = () => {\r\n\tconst [modal, setModal] = useState(false);        // 모달 oepn 여부\r\n\tconst [popup, setPopup] = useState(\"login\");       // popup 상태값\r\n\tconst [isLogin, setIsLogin] = useState(localStorage.getItem(\"profile\") ? true : false);   // 로그인 여부\r\n\tconst [profile, setProfile] = useState(JSON.parse(localStorage.getItem(\"profile\")));   // 로컬스토리지에 저장된 사용자 정보\r\n\r\n\tconst nickname = profile && profile.user_nickname;\r\n  \tconst navigate = useNavigate();\r\n\r\n\tconst goToPage = (url) => {\r\n\t\tnavigate(url);\r\n\t};\r\n\r\n\tconst logout = () => {\r\n\t\tlocalStorage.removeItem(\"profile\");\r\n\t\tgoToPage(\"/\");\r\n\t\twindow.location.reload();\r\n\t};\r\n\r\n\t// 모달창 닫는 함수\r\n\tconst closeModal = () => {\r\n\t\tsetModal(false);\r\n\t};\r\n\r\n\t// 팝업 상태값 변경\r\n\tconst popupChange = () => {\r\n\t\t// 로그인\r\n\t\tif (popup === \"login\") {\r\n\t\t\treturn (\r\n\t\t\t\t<LoginPopup\r\n\t\t\t\t\tchangeState={() => setPopup(\"join\")}\r\n\t\t\t\t\tisLogin={() => setIsLogin(true)}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\r\n\t\t\t// 회원가입\r\n\t\t} else if (popup === \"join\") {\r\n\t\t\treturn (\r\n        <JoinPopup \r\n          profile={profile} \r\n          setProfile={setProfile}\r\n\t\t\t\t\tchangeState={() => setPopup(\"login\")}\r\n        />\r\n      );\r\n\r\n\t\t\t// 프로필 수정\r\n\t\t} else if (popup === \"editProfile\") {\r\n\t\t\treturn (\r\n\t\t\t\t<EditProfilePopup\r\n\t\t\t\t\tprofile={profile}\r\n\t\t\t\t\tsetProfile={setProfile}\r\n\t\t\t\t\tcloseModal={closeModal}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n  // 현재 컴포넌트 URL 경로(새로고침 시 선택한 탭 메뉴 bolder 유지를 위해 현재 경로를 참조: 새로고침 시 state는 초기화)\r\n  const currentPath = window.location.pathname;\r\n\r\n\treturn (\r\n\t\t<Whole>\r\n\t\t\t<LogoBox>\r\n\t\t\t\t<Logo variant=\"h1\" onClick={() => navigate(\"/\")}>\r\n\t\t\t\t\tNOVELY\r\n\t\t\t\t</Logo>\r\n\t\t\t</LogoBox>\r\n\t\t\t<MenuBar>\r\n\t\t\t\t{profile && (\r\n\t\t\t\t\t<WelcomeMsg>\r\n\t\t\t\t\t\t{profile.user_reg_dv === \"G\" ? MESSAGE.PRE_WRITER : MESSAGE.WRITER}&nbsp;\r\n\t\t\t\t\t\t{nickname}님 👋\r\n\t\t\t\t\t</WelcomeMsg>\r\n\t\t\t\t)}\r\n\t\t\t\t<MenuBtnBox>\r\n\t\t\t\t\t{/* 비로그인 상태 */}\r\n\t\t\t\t\t{!profile ? (\r\n\t\t\t\t\t\t<Buttons\r\n\t\t\t\t\t\t\ttype={CODE.BUTTON.BORDER}\r\n\t\t\t\t\t\t\tname={LABEL.BUTTONS.LOGIN}\r\n\t\t\t\t\t\t\tbackgroundColor={\"black\"}\r\n\t\t\t\t\t\t\tcolor={\"white\"}\r\n\t\t\t\t\t\t\twidth={83}\r\n\t\t\t\t\t\t\tshowModal={() => setModal(true)}\r\n\t\t\t\t\t\t\tchangeState={() => setPopup(\"login\")}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t// 일반 유저 로그인 상태\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<Buttons\r\n\t\t\t\t\t\t\t\tnavigate={() => navigate(\"/favorite_novel\")}\r\n\t\t\t\t\t\t\t\ttype={CODE.BUTTON.BASIC}\r\n\t\t\t\t\t\t\t\tname={LABEL.BUTTONS.FAVORITE_NOVEL}\r\n\t\t\t\t\t\t\t\tmargin={10}\r\n\t\t\t\t\t\t\t\tfontWeight={currentPath === \"/favorite_novel\" && \"bolder\"}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t{/* 권한에 따라 내 정보, 내 작품 메뉴 변경 */}\r\n\t\t\t\t\t\t\t{profile.user_reg_dv === \"W\" && (\r\n\t\t\t\t\t\t\t\t<Buttons\r\n\t\t\t\t\t\t\t\t\tnavigate={() => navigate(\"/author_myNovel\")}\r\n\t\t\t\t\t\t\t\t\ttype={CODE.BUTTON.BASIC}\r\n\t\t\t\t\t\t\t\t\tname={LABEL.BUTTONS.MY_NOVEL}\r\n\t\t\t\t\t\t\t\t\tmargin={10}\r\n\t\t\t\t\t\t\t\t\tfontWeight={currentPath === \"/author_myNovel\" && \"bolder\"}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t<Buttons\r\n\t\t\t\t\t\t\t\ttype={CODE.BUTTON.BASIC}\r\n\t\t\t\t\t\t\t\tname={LABEL.BUTTONS.MY_INFO}\r\n\t\t\t\t\t\t\t\tmargin={\"10px 25px 10px 10px\"}\r\n\t\t\t\t\t\t\t\tshowModal={() => setModal(true)}\r\n\t\t\t\t\t\t\t\tchangeState={() => setPopup(\"editProfile\")}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<Buttons\r\n\t\t\t\t\t\t\t\ttype={CODE.BUTTON.BORDER}\r\n\t\t\t\t\t\t\t\tname={LABEL.BUTTONS.LOGOUT}\r\n\t\t\t\t\t\t\t\tbackgroundColor={\"black\"}\r\n\t\t\t\t\t\t\t\tcolor={\"white\"}\r\n\t\t\t\t\t\t\t\twidth={90}\r\n\t\t\t\t\t\t\t\tlogout={logout}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</MenuBtnBox>\r\n\t\t\t</MenuBar>\r\n\t\t\t<ModalPopup\r\n\t\t\t\topen={modal}\r\n\t\t\t\twidth={modalWidth(popup)}\r\n\t\t\t\theight={modalHeight(popup)}\r\n\t\t\t\tonClose={() => setModal(false)}\r\n\t\t\t\tpopupState={popup}\r\n\t\t\t>\r\n\t\t\t\t{popupChange()}\r\n\t\t\t</ModalPopup>\r\n\t\t</Whole>\r\n\t);\r\n};\r\n\r\nexport default Header;","import Header from \"components/container/Header\";\r\n\r\nconst Page = (props) => {\r\n  \r\n  return (\r\n    <>\r\n      <Header \r\n        profile={props.profile}\r\n        setProfile={props.setProfile}\r\n        logout={props.logout}\r\n      />\r\n      {props.children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Page;","// React Package Module\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\n\r\n// 공통 Component\r\nimport Page from \"components/container/Page\";\r\n\r\n// Pages\r\nimport pages from \"pages\";\r\n\r\n// Styles\r\nimport \"styles/App.css\";\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n      <Router>\r\n        <Routes>\r\n          <Route path=\"/*\" element={<Page><pages.MainPage /></Page>}/>                            {/** 메인 페이지*/}\r\n          <Route path=\"/novel_detail\" element={<Page><pages.NovDetailPage /></Page>}/>            {/** 소설 상세 정보 페이지*/}\r\n          <Route path=\"/author_myNovel\" element={<Page><pages.AuthorMyNov /></Page>}/>            {/** 작가 권한 내 작품 페이지*/}\r\n          <Route path=\"/favorite_novel\" element={<Page><pages.FavoriteNov /></Page>}/>            {/** 찜한 작품 페이지*/}\r\n        </Routes>\r\n      </Router>\r\n  );\r\n};\r\n\r\nexport default App;"],"names":["Wrapper","styled","Box","justifyContent","alignItems","padding","Text","TextField","width","height","fontSize","marginTop","ButtonBox","display","fileUploaderBtn","backgroundColor","color","border","cursor","margin","props","closeModal","profile","setProfile","useState","JSON","parse","localStorage","getItem","newPw","setNewPw","curPw","setCurPw","nickname","setNickname","user_nickname","img","setImg","confirmNewPwRegMsg","setConfirmNewPwRegMsg","pwRegMsg","setPwRegMsg","nickNameRegMsg","setNickNameRegMsg","info","setInfo","isAuthor","setIsAuthor","user_reg_dv","selectedFileName","setSelectedFileName","previewUrl","setPreviewUrl","imageUrl","useMemo","concat","process","image","Date","now","nickNameValidation","fileInputRef","useRef","_jsxs","children","_jsx","sx","borderRadius","marginBottom","backgroundImage","backgroundSize","type","accept","onChange","e","file","target","files","name","reader","FileReader","onloadend","result","readAsDataURL","fileChange","style","ref","textAlign","onClick","fileUploadBtn","current","click","LABEL","BUTTONS","UPLOAD_IMAGE","id","InputProps","readOnly","variant","placeholder","login_id","defaultValue","value","onBlur","test","MESSAGE","ERROR","NICKNAME_INVALIDATION","helperText","INPUT","PLACE_HOLDER","CURRENT_PW","NEW_PW","pwValidation","NEW_PW_REPEAT","CONFIRM_NEW_PW","author_info","Buttons","CODE","BUTTON","BASIC","SUBMIT","onEditProfile","alert","WRITE_CUR_PW","length","INFO_INVALIDATION","data","current_pw","new_pw","old_img_name","formData","FormData","Object","keys","forEach","key","append","patchData","then","newData","stringify","setItem","EDIT_SUCCEED","Whole","LogoBox","paddingLeft","Logo","Typography","fontWeight","alignSelf","MenuBar","flexGrow","marginRight","WelcomeMsg","marginLeft","MenuBtnBox","Header","modal","setModal","popup","setPopup","isLogin","setIsLogin","navigate","useNavigate","currentPath","window","location","pathname","PRE_WRITER","WRITER","_Fragment","FAVORITE_NOVEL","MY_NOVEL","MY_INFO","showModal","changeState","BORDER","LOGOUT","logout","removeItem","reload","LOGIN","ModalPopup","open","modalWidth","modalHeight","onClose","popupState","LoginPopup","JoinPopup","EditProfilePopup","App","Router","Routes","Route","path","element","Page","pages","MainPage","NovDetailPage","AuthorMyNov","FavoriteNov"],"sourceRoot":""}