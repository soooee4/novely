{"version":3,"file":"static/js/864.5c8e0ca8.chunk.js","mappings":"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","sources":["components/contents/NovelInfo.js","components/layout/BasicTable.js","components/popup/ViewCompleteNovModal.js","components/popup/ViewIncompleteNovModal.js","components/popup/WriteSubNovModal.js","components/contents/AuthorInfo.js","components/popup/AuthorDetailModal.js","components/popup/SelectTagModal.js","components/popup/WriteNovIntroModal.js","components/popup/SetNovCoverModal.js","components/popup/ViewSubNovModal.js","pages/NovDetail.js"],"sourcesContent":["// MUI Package Module\r\nimport { Box, styled, Typography } from \"@mui/material\";\r\n\r\n// Control Component\r\nimport Buttons from \"components/controls/Button\";\r\nimport Icons from \"components/controls/Icons\";\r\n\r\n// Constant\r\nimport { CODE, LABEL, COLOR, MESSAGE } from \"common\";\r\n\r\n/** STYLE 정의 */\r\n// 전체 영역\r\nconst Whole = styled(Box)({\r\n\twidth: \"100%\",\r\n\theight: 150,\r\n\tdisplay: \"flex\",\r\n\tmargin: \"0 auto\",\r\n\tpaddingTop: 20,\r\n\r\n});\r\n\r\n// 좌측 소개글 및 이미지 영역\r\nconst InfoBox = styled(Box)({\r\n\twidth: \"70%\",\r\n\theight: \"100%\",\r\n\tdisplay: \"flex\",\r\n\tflexDirection: \"column\",\r\n\r\n});\r\n\r\n// 마감 기한 표시 및 view 버튼 영역\r\nconst DateBox = styled(Box)({\r\n\tflexGrow: 1,\r\n\theight: \"100%\",\r\n\tdisplay: \"flex\",\r\n\tflexDirection: \"column\",\r\n});\r\n\r\n// 소설 제목 영역\r\nconst TitleBox = styled(Box)({\r\n\twidth: \"100%\",\r\n\tminHeight: 30,\r\n\tmarginBottom: 5,\r\n});\r\n\r\n// 작가 이름 영역\r\nconst AuthorBox = styled(Box)({\r\n\twidth: \"100%\",\r\n\tminHeight: 16,\r\n});\r\n\r\n// 소설 소개 영역\r\nconst DescriptionBox = styled(Box)({\r\n\tflexGrow: 1,\r\n\tmarginTop: 12,\r\n\tmarginBottom: 15,\r\n});\r\n\r\n// 제목 텍스트\r\nconst Title = styled(Typography)({\r\n\tfontSize: 23,\r\n\tfontWeight: 800,\r\n});\r\n\r\n// 작가 이름 텍스트\r\nconst Author = styled(Typography)({\r\n\tfontSize: 15,\r\n\t\"&:hover\": {\r\n\t\tcursor: \"pointer\",\r\n\t\tfontWeight: 900,\r\n\t},\r\n});\r\n\r\n// 소설 소개 텍스트\r\nconst Description = styled(Typography)({\r\n\tfontSize: 13,\r\n\tcolor: COLOR.GRAY,\r\n});\r\n\r\n// 기한 표시 텍스트\r\nconst DateInfo = styled(Typography)({\r\n\tfontSize: 23,\r\n\tmarginTop: 30,\r\n\tmarginBottom: 10,\r\n\tmarginLeft: \"auto\",\r\n});\r\n\r\n//  view 버튼 영역\r\nconst NovelViewBox = styled(Box)({\r\n\tflex: 1,\r\n\tdisplay: \"flex\",\r\n\twidth: 70,\r\n\tmarginLeft: \"auto\",\r\n});\r\n\r\n/** 소설 축약 정보 컴포넌트(소설 상세보기 페이지의 헤더) */\r\nconst NovelInfo = (props) => {\r\n\r\n\treturn (\r\n    <Whole>\r\n      <InfoBox>\r\n        <TitleBox>\r\n          <Title>{props.title}</Title>\r\n        </TitleBox>\r\n        <AuthorBox>\r\n          {props.main_author_id ? (\r\n            <>\r\n              <Author\r\n                onClick={() => {\r\n                  props.showModal();\r\n                  props.setModal(\"authorDetail\");\r\n                  props.setAuthorId(props.main_author_id);\r\n                  props.setAuthorNickName(props.main_author_nickname);\r\n                }}\r\n              >\r\n                By.{props.main_author_nickname}\r\n              </Author>\r\n              {props.sub_author_id && (\r\n                <Author\r\n                  onClick={() => {\r\n                    props.showModal();\r\n                    props.setModal(\"authorDetail\");\r\n                    props.setAuthorId(props.sub_author_id);\r\n                    props.setAuthorNickName(props.sub_author_nickname);\r\n                  }}\r\n                >\r\n                  By.{props.sub_author_nickname}\r\n                </Author>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <Author\r\n              onClick={() => {\r\n                props.showModal();\r\n                props.setModal(\"authorDetail\");\r\n                props.setAuthorId(props.created_user);\r\n                props.setAuthorNickName(props.user_nickname);\r\n              }}\r\n            >\r\n              By.{props.user_nickname}\r\n            </Author>\r\n          )}\r\n        </AuthorBox>\r\n        <DescriptionBox>\r\n          {/* 사용자가 줄바꿈을 했을 때 공백으로 띄워주기 위해 replace 매서드 사용 */}\r\n          <Description>\r\n            {props.description && props.description.replace(/\\\\n/g, \" \")}\r\n          </Description>\r\n        </DescriptionBox>\r\n      </InfoBox>\r\n\r\n      <DateBox>\r\n        {/* {props.complete_seqno ? (\r\n          <DateInfo>{MESSAGE.DDAY_COMPLETE}</DateInfo>\r\n        ) : ( */}\r\n          <DateInfo>\r\n            {/* {MESSAGE.DDAY_COUNT} */}\r\n            {props.novelDdayCounter}\r\n          </DateInfo>\r\n        {/* )} */}\r\n        <NovelViewBox\r\n          onClick={() => {\r\n            props.showModal();\r\n            props.complete_seqno !== undefined\r\n              ? props.setModal(\"viewComNov\")\r\n              : props.setModal(\"viewIncomNov\");\r\n          }}\r\n        >\r\n          <Icons type={CODE.ICON.SEARCH} />\r\n          <Buttons\r\n            type={CODE.BUTTON.BASIC}\r\n            name={LABEL.BUTTONS.VIEWNOVEL}\r\n            height={10}\r\n            margin={\"5px 0 0 -12px\"}\r\n          />\r\n        </NovelViewBox>\r\n      </DateBox>\r\n    </Whole>\r\n  );\r\n};\r\n\r\nexport default NovelInfo;\r\n","// MUI Package Module\r\nimport {\r\n\tTable,\r\n\tTableBody,\r\n\tTableCell,\r\n\tTableContainer,\r\n\tTableRow,\r\n\tPaper,\r\n} from \"@mui/material\";\r\nimport { CODE } from \"common\";\r\n\r\n/** 서브소설 목록을 보여주는 테이블 컴포넌트 (소설 상세보기 페이지에서 사용) */\r\nconst BasicTable = (props) => {\r\n\r\n\treturn (\r\n\t\t<TableContainer\r\n\t\t\tcomponent={Paper}\r\n\t\t\tsx={{\r\n\t\t\t\twidth: \"100%\",\r\n\t\t\t\tboxShadow: \"none\",\r\n\t\t\t\tborder: \"1px solid #E0E0E0\",\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<Table\r\n\t\t\t\tsx={{\r\n\t\t\t\t\tminWidth: 650,\r\n\t\t\t\t}}\r\n\t\t\t\taria-label=\"simple table\"\r\n\t\t\t>\r\n\t\t\t\t<TableBody>\r\n\t\t\t\t\t{props.subNovelData && props.isPopular === false\r\n\t\t\t\t\t\t? props.subNovelData.map((novel, i) => (\r\n\t\t\t\t\t\t\t\t<TableRow\r\n\t\t\t\t\t\t\t\t\t// map 메서드 사용 시 key값으로 각 항목을 식별 (id, index 등)\r\n\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\t\t\"&:last-child td, &:last-child th\": { border: 0 },\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t// 클릭 이벤트에 NovDetail에서 받은 index 상태값에 파라미터로 넘겨받는 index를 넣어줌\r\n\t\t\t\t\t\t\t\t\t\t\tprops.setNovelIdx(i);\r\n\t\t\t\t\t\t\t\t\t\t\tprops.changeState();\r\n\t\t\t\t\t\t\t\t\t\t\tprops.showModal();\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\talign=\"center\"\r\n\t\t\t\t\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\t\t\twidth: \"55%\",\r\n\t\t\t\t\t\t\t\t\t\t\ttextAlign: \"left\",\r\n\t\t\t\t\t\t\t\t\t\t\tcursor: \"pointer\",\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<div>{novel.sub_title}</div>\r\n\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\t\t\twidth: \"30%\",\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tBy.{novel.user_nickname}\r\n\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t<TableCell align=\"center\">👍 {novel.sub_like_count}</TableCell>\r\n                  <TableCell align=\"center\">\r\n                  </TableCell>\r\n\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t  ))\r\n\t\t\t\t\t\t: // isPopular가 true일 경우 popularOrder 데이터를 뿌려줌\r\n\t\t\t\t\t\t  props.popularOrder.map((novel, i) => (\r\n\t\t\t\t\t\t\t\t<TableRow\r\n\t\t\t\t\t\t\t\t\t// map 메서드 사용 시 key값으로 각 항목을 식별 (id, index 등)\r\n\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\t\t\"&:last-child td, &:last-child th\": { border: 0 },\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t// 클릭 이벤트에 NovDetail에서 받은 index 상태값에 파라미터로 넘겨받는 index를 넣어줌\r\n\t\t\t\t\t\t\t\t\t\t\tprops.setNovelIdx(i);\r\n\t\t\t\t\t\t\t\t\t\t\tprops.changeState();\r\n\t\t\t\t\t\t\t\t\t\t\tprops.showModal();\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\talign=\"center\"\r\n\t\t\t\t\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\t\t\t\t\tsx={{\r\n                      width: \"55%\",\r\n\t\t\t\t\t\t\t\t\t\t\ttextAlign: \"left\",\r\n\t\t\t\t\t\t\t\t\t\t\tcursor: \"pointer\",\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<div>{novel.sub_title}</div>\r\n\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\t\t\twidth: \"30%\",\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t// align=\"center\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tBy.{novel.user_nickname}\r\n\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t<TableCell align=\"center\">👍 {novel.sub_like_count}</TableCell>\r\n                  <TableCell align=\"center\">\r\n                  </TableCell>\r\n\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t  ))}\r\n\t\t\t\t</TableBody>\r\n\t\t\t</Table>\r\n\t\t</TableContainer>\r\n\t);\r\n};\r\n\r\nexport default BasicTable;\r\n","// React Package Module\r\nimport { useEffect, useState } from \"react\";\r\n\r\n// Constant\r\nimport { Box, styled, Typography } from \"@mui/material\";\r\n\r\n// API\r\nimport { getData } from \"common/communication\";\r\n\r\n/** STYLE 정의 */\r\n\t// 레이아웃\r\n\tconst Wrapper = styled(Box)({\r\n\t\twidth: \"100%\",\r\n    height: \"100%\",\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"column\",\r\n\t\tpadding: '0 3%',\r\n\t\tboxSizing: 'border-box',\r\n\t\t\r\n\t});\r\n\r\n\tconst Title = styled(Typography)({\r\n\t\tmarginBottom: 15,\r\n\t\tfontSize: 18,\r\n\t\tfontWeight: \"bold\",\r\n\t});\r\n\r\n\tconst Content = styled(Typography)({\r\n\t\tfontSize: 17,\r\n\t\twhiteSpace: \"pre-wrap\"\r\n\t});\r\n\r\n\t// 내용 표시되는 영역\r\nconst ContentBox = styled(Box)({\r\n  \toverflow: \"auto\",\r\n    paddingRight: 12,\r\n\t'&::-webkit-scrollbar': {\r\n\t\twidth: 5\r\n\t},\r\n\t'&::-webkit-scrollbar-thumb': {\r\n\t\tbackgroundColor: '#aaa',\r\n\t\tborderRadius: 5,\r\n\t},\r\n\t'&::-webkit-scrollbar-track': {\r\n\t\tbackgroundColor: 'transparent',\r\n\t},\r\n});\r\n\r\n\r\n/** 완성 작품 읽기 컴포넌트 (작품 상세 페이지에서 view 버튼 클릭 시 완성작일 경우 해당 팝업 띄워줌) */\r\nconst ViewCompleteNovModal = (props) => {\r\n\r\n\tconst [completeNovel, setCompleteNovel] = useState({});   // 완성 소설 데이터\r\n\r\n\t// 완성 소설 보기\r\n\tuseEffect(() => {\r\n\t\tgetData(\"novel/getCompleteNovel\", { complete_seqno: props.complete_seqno })\r\n\t\t\t.then(function (data) {\r\n\t\t\t\tsetCompleteNovel(data);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<Wrapper>\r\n\t\t\t<Title>{completeNovel[0] && completeNovel[0].complete_novel_title}</Title>\r\n\t\t\t<ContentBox>\r\n\t\t\t\t<Content>\r\n\t\t\t\t\t{completeNovel[0] &&\r\n\t\t\t\t\t\tcompleteNovel[0]\r\n\t\t\t\t\t\t\t// .complete_novel_content\r\n\t\t\t\t\t\t\t// .split(\"\\\\n\")\r\n\t\t\t\t\t\t\t// .map((line, i) => (\r\n\t\t\t\t\t\t\t// \t<>\r\n\t\t\t\t\t\t\t// \t\t{line.replaceAll('\\\\', \"\")}\r\n\t\t\t\t\t\t\t// \t\t<br />\r\n\t\t\t\t\t\t\t// \t</>\r\n\t\t\t\t\t\t\t// ))\r\n              .complete_novel_content\r\n\t\t\t\t\t\t\t.replaceAll(/(?:\\r|\\n\\|r\\n|\\\\n|\\\\r|\\\\n\\\\n|\\\\r\\\\n)/g, \"\\r\\n\")\r\n              .replaceAll(\"\\\\\", \"\")\r\n              // .split(\"\\r\\n\")\r\n\t\t\t\t\t\t\t// .map((line, i) => (\r\n\t\t\t\t\t\t\t// \t<>\r\n\t\t\t\t\t\t\t// \t\t{line.replaceAll(\"\\r\\n\", <br />)}\r\n\t\t\t\t\t\t\t// \t\t{/* <br /> */}\r\n\t\t\t\t\t\t\t// \t</>\r\n\t\t\t\t\t\t\t// ))\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t</Content>\r\n\t\t\t</ContentBox>\r\n\t\t</Wrapper>\r\n\t);\r\n};\r\n\r\nexport default ViewCompleteNovModal;","// React Package Module\r\nimport { useEffect, useState, React } from \"react\";\r\n\r\n// MUI Package Module\r\nimport { Box, styled, Typography } from \"@mui/material\";\r\n\r\n// Control Component\r\nimport Buttons from \"components/controls/Button\";\r\n\r\n// Constant\r\nimport { CODE, LABEL, COLOR } from \"common\";\r\n\r\n// API\r\nimport { getData } from \"common/communication\";\r\n\r\n/** STYLE 정의 */\r\n// 전체 영역\r\nconst Wrapper = styled(Box)({\r\n\twidth: \"100%\",\r\n\tdisplay: \"flex\",\r\n\tflexDirection: \"column\",\r\n\tpadding: \"0 3%\",\r\n  \tpaddingRight: \"1.5%\",\r\n\tboxSizing: \"border-box\",\r\n\tpaddingTop: \"20px\",\r\n\theight: \"100%\",\r\n});\r\n\r\n// 제목, 이어쓰기 버튼 영역\r\nconst HeaderBox = styled(Box)({\r\n\twidth: \"100%\",\r\n\tdisplay: \"flex\",\r\n\tboxSizing: \"border-box\",\r\n  flexShrink: 0\r\n});\r\n\r\nconst Title = styled(Typography)({\r\n\tmarginBottom: 15,\r\n\tfontSize: 18,\r\n\tfontWeight: \"bold\",\r\n});\r\n\r\nconst Content = styled(Typography)({\r\n\tfontSize: 15,\r\n  whiteSpace: \"pre-wrap\",\r\n  \r\n});\r\n\r\nconst ScrollBox = styled(Box)({\r\n  overflow: \"auto\",\r\n\theight: \"100%\",\r\n\r\n  '&::-webkit-scrollbar': {\r\n    width: 7, \r\n  },\r\n  '&::-webkit-scrollbar-thumb': {\r\n    background: '#aaa',\r\n    borderRadius: 5,\r\n  },\r\n  '&::-webkit-scrollbar-track': {\r\n    backgroundColor: 'transparent',\r\n  },\r\n})\r\n\r\n\r\n/** 미완성 작품 (메인 소설) 읽기 컴포넌트 (작품 상세 페이지에서 view 버튼 클릭 시 미완성작일 경우 해당 팝업 띄워줌) */\r\nconst ViewIncompleteNovModal = (props) => {\r\n\tconst [mainNovel, setMainNovel] = useState({});         // 메인 소설 데이터\r\n\r\n\t// 미완성 소설 보기\r\n\tuseEffect(() => {\r\n\t\tgetData(\"novel/getMainNovel\", { novel_seqno: props.main_seqno })\r\n\t\t\t.then(function (data) {\r\n\t\t\t\t// 현재 팝업과 소설 상세 페이지에서 값을 공유해야 하므로 2군데 데이터 세팅\r\n\t\t\t\tsetMainNovel(data[0]);\r\n\r\n\t\t\t\t// NovDetail에서 필요한 데이터만 뽑아 가공 후 전달\r\n\t\t\t\tconst mainData = {\r\n\t\t\t\t\ttitle: data[0].title,\r\n\t\t\t\t\tcontent: data[0].content,\r\n\t\t\t\t\tmain_seqno: data[0].main_seqno,\r\n\t\t\t\t};\r\n\t\t\t\tprops.setMainNovel(mainData);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<Wrapper>\r\n\t\t\t<HeaderBox>\r\n\t\t\t\t<Title>{mainNovel && mainNovel.title}</Title>\r\n\t\t\t\t{mainNovel.created_user !== props.login_id && (\r\n\t\t\t\t\t<Buttons\r\n\t\t\t\t\t\ttype={CODE.BUTTON.BASIC}\r\n\t\t\t\t\t\tbackgroundColor={COLOR.WHITE}\r\n\t\t\t\t\t\tcolor={props.color === \"#121212\" ? COLOR.WHITE : COLOR.BLACK}\r\n\t\t\t\t\t\tname={LABEL.BUTTONS.GOTOWRITE}\r\n\t\t\t\t\t\tmargin={\"-30px 0px 0px auto\"}\r\n\t\t\t\t\t\tpadding={0}\r\n\t\t\t\t\t\tchangeState={props.changeState}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</HeaderBox>\r\n\t\t\t<ScrollBox>\r\n\t\t\t\t<Content>\r\n\t\t\t\t\t{mainNovel && mainNovel.content\r\n\t\t\t\t\t\t? mainNovel.content.split(\"\\\\n\").map((line, i) => (\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t{line}\r\n\t\t\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t  ))\r\n\t\t\t\t\t\t: \"\"}\r\n\t\t\t\t</Content>\r\n\t\t\t</ScrollBox>\r\n\t\t</Wrapper>\r\n\t);\r\n};\r\n\r\nexport default ViewIncompleteNovModal;","// React Package Module\r\nimport { useEffect, useState } from \"react\";\r\n\r\n// Control Component\r\nimport Buttons from \"components/controls/Button\";\r\nimport Inputs from \"components/controls/Input\";\r\n\r\n// MUI Package Module\r\nimport { Box, styled, Typography } from \"@mui/material\";\r\n\r\n// Constant\r\nimport { CODE, LABEL, COLOR, MESSAGE } from \"common\";\r\n\r\n/** STYLE 정의 */\r\n// 전체 영역\r\nconst Wrapper = styled(Box)({\r\n\twidth: \"100%\",\r\n\theight: \"100%\",\r\n\tdisplay: \"flex\",\r\n\tflexDirection: \"column\",\r\n\tpadding: \"0 3%\",\r\n\tboxSizing: \"border-box\",\r\n\tmarinTop: \"-30px\",\r\n});\r\n\r\nconst WholeBox = styled(Box)({\r\n\twidth: \"100%\",\r\n\theight: \"88%\",\r\n\tdisplay: \"flex\",\r\n\tgap: 20,\r\n\tmarginTop: 20,\r\n\tboxSizing: \"border-box\",\r\n});\r\n\r\nconst ScrollBox = styled(Box)({\r\n  overflow: \"auto\",\r\n\theight: \"100%\",\r\n\r\n  '&::-webkit-scrollbar': {\r\n    width: 5, \r\n  },\r\n  '&::-webkit-scrollbar-thumb': {\r\n    background: '#aaa',\r\n    borderRadius: 5,\r\n  },\r\n  '&::-webkit-scrollbar-track': {\r\n    backgroundColor: 'transparent',\r\n  },\r\n})\r\n\r\nconst ViewBox = styled(Box)({\r\n\tflex: 1,\r\n\theight: \"100%\",\r\n\tborder: `1px solid ${COLOR.GRAY}`,\r\n\tborderRadius: 10,\r\n\tpadding: 10,\r\n  paddingRight:5,\r\n\tboxSizing: \"border-box\",\r\n\r\n});\r\n\r\nconst WriteBox = styled(Box)({\r\n  flex: 1,\r\n\theight: \"100%\",\r\n\tboxSizing: \"border-box\",\r\n  borderRadius: 10,\r\n  padding: 10,\r\n  paddingRight:5,\r\n\tborder: `1px solid ${COLOR.GRAY}`,\r\n\r\n\r\n  '&>textarea::-webkit-scrollbar': {\r\n    width: 5, \r\n  },\r\n  '&>textarea::-webkit-scrollbar-thumb': {\r\n    background: '#aaa',\r\n    borderRadius: 5,\r\n  },\r\n  '&>textarea::-webkit-scrollbar-track': {\r\n    backgroundColor: 'transparent',\r\n  },\r\n});\r\n\r\n// 제목, 이어쓰기 버튼 영역\r\nconst HeaderBox = styled(Box)({\r\n\twidth: \"100%\",\r\n\tdisplay: \"flex\",\r\n\tboxSizing: \"border-box\",\r\n});\r\n\r\n// 글자수 표시 영역\r\nconst CountText = styled(Typography)({\r\n  fontSize: 13,\r\n  margin: \"3px 5px 0px auto\"\r\n});\r\n\r\n\r\nconst Content = styled(Typography)({\r\n\tfontSize: 15,\r\n  marginRight:5\r\n});\r\n\r\nconst writeNovText = (color) => {\r\n  return (\r\n    {\r\n      border:'none',\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      boxSizing: \"borderBox\",\r\n      resize: \"none\",\r\n      outline: \"none\",\r\n      fontSize: 17,\r\n      boxSizing: \"border-box\",\r\n      backgroundColor: color,\r\n      color: color === \"#121212\" ? \"white\" : \"black\",\r\n    }\r\n  )\r\n};\r\n\r\n/** 서브 소설 title, content 작성 컴포넌트 (미완성 소설 보는 팝업에서 이어쓰기 버튼 클릭 시 해당 팝업 띄워줌) */\r\nconst WriteSubNovModal = (props) => {\r\n\tconst [title, setTitle] = useState(\"\");           // 서브 소설 제목\r\n\tconst [content, setContent] = useState(\"\");       // 서브 소설 내용\r\n  // const [isScrolling, setIsScrolling] = useState(false);\r\n  const [contentCount, setContentCount] = useState(0) // 내용 글자수 체크\r\n\r\n\tconst inputTitle = (e) => {\r\n\t\tsetTitle(e.target.value);\r\n\t};\r\n\r\n\tconst inputContent = (e) => {\r\n\t\tsetContent(e.target.value);\r\n    setContentCount(e.target.value.length);\r\n\r\n\t};\r\n\r\n  // 저장 후 다음 버튼 눌렀을 때 NovDetail 페이지에 있는 (서버로 보낼) 상태값에 데이터 세팅\r\n\tconst postSubNovel = () => {\r\n\t\tif (content === \"\") {\r\n\t\t\talert(MESSAGE.ERROR.WRITE_CONTENT);\r\n\t\t\treturn;\r\n\t\t} else if (title.length > 50) {\r\n\t\t\talert(MESSAGE.ERROR.TITLE_INVALIDATION);\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tprops.setTitleContent({\r\n\t\t\t\ttitle: title,\r\n\t\t\t\tcontent: content,\r\n\t\t\t\tmain_novel_seqno: props.mainNovel.main_seqno,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n  //스크롤 감지하여 화면에 띄워주는 함수\r\n  // const handleScroll = () => {\r\n  //   setIsScrolling(true);\r\n    // 스크롤링 0.5초 후 동작 멈춤\r\n  //   setTimeout(() => {\r\n  //     setIsScrolling(false);\r\n  //   }, 1000);\r\n  // }\r\n  \r\n  // useEffect(() => {\r\n  //   const temp = document.querySelector('.cc')\r\n  //   temp.addEventListener(\"scroll\", handleScroll);\r\n\r\n    // 클린업 (언마운트 시 이벤트 리스너 삭제)\r\n  //   return () => {\r\n  //     temp.removeEventListener(\"scroll\", handleScroll);\r\n  //   };\r\n  // }, []);\r\n\r\n\treturn (\r\n\t\t<Wrapper>\r\n\t\t\t<HeaderBox>\r\n\t\t\t\t<Inputs\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t\tdefaultValue={props.mainNovel.title}\r\n\t\t\t\t\tonChange={inputTitle}\r\n\t\t\t\t\tcolor={props.color}\r\n\t\t\t\t/>\r\n\t\t\t\t<Buttons\r\n\t\t\t\t\ttype={CODE.BUTTON.BASIC}\r\n\t\t\t\t\tcolor={props.color === \"#121212\" ? COLOR.WHITE : COLOR.BLACK}\r\n\t\t\t\t\tname={LABEL.BUTTONS.GOTONEXT}\r\n\t\t\t\t\tmargin={\"-20px 0px 0px auto\"}\r\n\t\t\t\t\tpostSubNovel={postSubNovel}\r\n\t\t\t\t\tchangeState={(content !== \"\" && title.length <= 50) && props.changeState}\r\n\t\t\t\t/>\r\n\t\t\t</HeaderBox>\r\n\t\t\t<WholeBox>\r\n\t\t\t\t<ViewBox>\r\n\t\t\t\t\t<ScrollBox>\r\n\t\t\t\t\t\t<Content>\r\n\t\t\t\t\t\t\t{props.mainNovel.content && props.mainNovel.content\r\n\t\t\t\t\t\t\t\t? props.mainNovel.content.split(\"\\\\n\").map((line, i) => (\r\n\t\t\t\t\t\t\t\t\t\t<div key={i}>\r\n\t\t\t\t\t\t\t\t\t\t\t{line.replace(\"\\\\r\", \"\")}\r\n\t\t\t\t\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t  ))\r\n\t\t\t\t\t\t\t\t: \"\"}\r\n\t\t\t\t\t\t</Content>\r\n\t\t\t\t\t</ScrollBox>\r\n\t\t\t\t</ViewBox>\r\n\t\t\t\t<WriteBox>\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tstyle={writeNovText(props.color)}\r\n\t\t\t\t\t\tonChange={inputContent}\r\n\t\t\t\t\t\tmaxLength={10000}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</WriteBox>\r\n\t\t\t</WholeBox>\r\n\t\t\t{contentCount === 10000 ? (\r\n\t\t\t\t<CountText style={{ color: \"red\" }}>{contentCount}/10000</CountText>\r\n\t\t\t) : (\r\n\t\t\t\t<CountText>{contentCount}/10000</CountText>\r\n\t\t\t)}\r\n\t\t</Wrapper>\r\n\t);\r\n};\r\n\r\nexport default WriteSubNovModal;","// MUI Package Module\r\nimport { Box, styled, Typography } from \"@mui/material\";\r\n\r\n/** STYLE 정의 */\r\n// 작가 이름\r\nconst AuthorName = styled(Typography)({\r\n  fontSize: 18,\r\n  textAlign: 'center',\r\n})\r\n\r\n// 작가 한줄 소개\r\nconst AuthorMessage = styled(Typography)({\r\n  fontSize: 10,\r\n  paddingLeft: 25,\r\n  paddingRight: 25,\r\n  marginTop: 5,\r\n  marginBottom: 15\r\n})\r\n\r\n\r\n\r\n/** 작가 상세정보 팝업에 들어가는 작가 소개 컴포넌트(작가 프로필 이미지, 닉네임, 소개글 포함) */\r\nconst AuthorInfo = (props) => {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: 280,\r\n  paddingTop: 5\r\n   \r\n        // marginBottom: 10\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          width: 180,\r\n          height: 180,\r\n          backgroundImage: `url(${process.env.REACT_APP_IMAGE_DIRECTORY}/${props.user_image})`,\r\n          backgroundSize: \"cover\",\r\n          borderRadius: '50%',\r\n          margin: '0 auto',\r\n          marginTop: 4,\r\n          marginBottom: 2\r\n        }}\r\n       />\r\n      {/* !닉네임으로 변경 */}\r\n      <AuthorName>{props.authorNickName}</AuthorName>\r\n      <AuthorMessage>작가 소갯말</AuthorMessage>\r\n      <Box \r\n        sx={{\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n        }}\r\n        >\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default AuthorInfo;","// React Package Module\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// Constant\r\nimport { Box, styled, Typography } from \"@mui/material\";\r\n\r\n// Content Component\r\nimport AuthorInfo from \"components/contents/AuthorInfo\";\r\nimport NovelCard from \"components/contents/NovelCard\";\r\n\r\n// Constant\r\nimport { MESSAGE } from \"common\";\r\n\r\n// API\r\nimport { getData } from \"common/communication\";\r\n\r\n/** STYLE 정의 */\r\n// 전체 영역\r\nconst Wrapper = styled(Box)({\r\n\twidth: \"100%\",\r\n\theight:\"100%\",\r\n\tdisplay: \"flex\",\r\n  gap: 20,\r\n});\r\n\r\n// 소설 컴포넌트 카드 영역\r\nconst NovelCardBox = styled(Box)({\r\n\tflexGrow: 1,\r\n  height: \"100%\",\r\n\twidth: \"80%\",\r\n\tmargin: \"0 auto\",\r\n\tdisplay: \"flex\",\r\n\tflexWrap: \"wrap\",\r\n  overflow: \"scroll\",\r\n  paddingTop: 20,\r\n  gap: 20,\r\n\r\n    // 스크롤바 숨기기\r\n    '&::-webkit-scrollbar': {\r\n      display: 'none'\r\n    },\r\n\r\n    '& > div' : {\r\n      margin: 0\r\n    }\r\n\r\n});\r\n\r\n\r\n\r\nconst IsDataInfo = styled(Typography)({\r\n\tfontSize: 17,\r\n});\r\n\r\n/** 작가 상세 정보를 보여주는 모달 (소설 상세 페이지에서 작가 닉네임 클릭시 해당 팝업 띄워짐) */\r\nconst AuthorDetailModal = (props) => {\r\n\tconst [authorNovelData, setAuthorNovelData] = useState([]);   // 작성한 메인 소설 데이터\r\n\tconst [userImg, setUserImg] = useState(\"\");                   // 사용자 프로필 이미지\r\n\tconst [profile, setProfile] = useState(                       // 로컬스토리지에 저장된 사용자 정보\r\n\t\tJSON.parse(localStorage.getItem(\"profile\"))\r\n\t);\r\n\r\n\tconst getNovelData = () => {\r\n\t\tgetData(\"novel/getAuthorNovel\", {\r\n\t\t\tcreated_user: props.authorId,\r\n\t\t\tlogin_id: profile.login_id,\r\n\t\t})\r\n\t\t\t.then(function (data) {\r\n\t\t\t\tsetAuthorNovelData(data.novel_data);\r\n\t\t\t\tsetUserImg(data.user_image);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tgetNovelData();\r\n\t}, []);\r\n\r\n\tconst navigate = useNavigate();\r\n\r\n\tconst goToDetail = (novel) => {\r\n\t\tnavigate(\"/novel_detail\", { state: { props: novel } });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Wrapper>\r\n\t\t\t<AuthorInfo\r\n\t\t\t\tauthorNickName={props.authorNickName}\r\n\t\t\t\tauthorId={props.authorId}\r\n\t\t\t\tuser_image={userImg}\r\n\t\t\t/>\r\n\t\t\t<NovelCardBox>\r\n\t\t\t\t{authorNovelData.length !== 0 ? (\r\n\t\t\t\t\tauthorNovelData.map((list) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<NovelCard\r\n\t\t\t\t\t\t\t\tkey={list.main_seqno}\r\n\t\t\t\t\t\t\t\tmain_seqno={list.main_seqno}\r\n\t\t\t\t\t\t\t\ttitle={list.title}\r\n\t\t\t\t\t\t\t\tdescription={list.description}\r\n\t\t\t\t\t\t\t\tcreated_date={list.created_date}\r\n\t\t\t\t\t\t\t\tcreated_user={list.created_user}\r\n\t\t\t\t\t\t\t\tuser_id={profile.login_id}       // 여기서 넘어가는 user_id는 해당 소설 찜 여부를 위한 값\r\n\t\t\t\t\t\t\t\tpick_yn={list.pick_yn}\r\n\t\t\t\t\t\t\t\tcover_image={list.cover_image}\r\n\t\t\t\t\t\t\t\tgetNovelData={getNovelData}\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tgoToDetail(list);\r\n\t\t\t\t\t\t\t\t\tprops.closeModal();\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<IsDataInfo>{MESSAGE.NO_INCOMPLETE_NOV}</IsDataInfo>\r\n\t\t\t\t)}\r\n\t\t\t</NovelCardBox>\r\n\t\t</Wrapper>\r\n\t);\r\n};\r\n\r\nexport default AuthorDetailModal;\r\n","// React Package Module\r\nimport { useEffect, useState } from \"react\";\r\n\r\n// MUI Package Module\r\nimport { Box, styled, Typography } from \"@mui/material\";\r\n\r\n// Control Component\r\nimport Buttons from \"components/controls/Button\";\r\n\r\n// Constant\r\nimport { CODE, LABEL, COLOR, MESSAGE } from \"common\";\r\n\r\n// API\r\nimport { getData } from \"common/communication\";\r\n\r\n/** STYLE 정의 */\r\n// 전체 영역\r\nconst Wrapper = styled(Box)({\r\n\twidth: \"100%\",\r\n\theight: \"100%\",\r\n\tdisplay: \"flex\",\r\n\tflexDirection: \"column\",\r\n\tpadding: \"0 3%\",\r\n\tboxSizing: \"border-box\",\r\n});\r\n\r\nconst WholeBox = styled(Box)({\r\n\twidth: \"100%\",\r\n\theight: \"100%\",\r\n\tdisplay: \"flex\",\r\n\tflexDirection: \"column\",\r\n\tgap: 10,\r\n\tmarginTop: 20,\r\n\tboxSizing: \"border-box\",\r\n});\r\n\r\n// 전체 태그 영역\r\nconst TagBox = styled(Box)({\r\n\tflex: 1,\r\n\theight: \"100%\",\r\n\tboxSizing: \"border-box\",\r\n});\r\n\r\n// 선택된 태그 표시 영역\r\nconst SelectedTagBox = styled(Box)({\r\n\tflex: 1,\r\n\theight: \"100%\",\r\n\tpadding: 10,\r\n\tboxSizing: \"border-box\",\r\n});\r\n\r\n// 장르 태그 영역\r\nconst GenreBox = styled(Box)({\r\n\tpadding: 10,\r\n\tboxSizing: \"border-box\",\r\n\twidth: \"100%\",\r\n});\r\n\r\n// 키워드 태그 영역\r\nconst KeywordBox = styled(Box)({\r\n\tpadding: 10,\r\n\tboxSizing: \"border-box\",\r\n});\r\n\r\n// 상단 안내 메세지 영역\r\nconst IntroMsg = styled(Typography)({\r\n\tfontSize: 18,\r\n\tfontWeight: \"bolder\",\r\n\ttextAlign: \"center\",\r\n\tmarginBottom: -5,\r\n});\r\n\r\n// 장르, 키워드 구분 텍스트\r\nconst DivTag = styled(Typography)({\r\n\tfontSize: 14,\r\n\tmarginBottom: 10,\r\n});\r\n\r\n/** 서브 소설 작성 후 태그 선택하는 팝업 */\r\nconst SelectTagModal = (props) => {\r\n\r\n\tconst [tag, setTag] = useState([]);             // 전체 태그\r\n\tconst [genre, setGenre] = useState([]);         // 선택된 장르\r\n\tconst [keyword, setKeyword] = useState([]);     // 선택된 키워드\r\n\r\n\tuseEffect(() => {\r\n\t\tgetData(\"common/tag\")\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetTag(data);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\t}, []);\r\n\r\n  // 태그 클릭 시 실행될 함수 (태그 선택 및 선택 해제)\r\n  const onSelectTags = (tag, type) => {\r\n    const checkState = type === \"genre\" ? genre : keyword;          // 현재 선택된 태그들을 담는 배열\r\n    const setState = type === \"genre\" ? setGenre: setKeyword;       // 상태를 업데이트하는 함수\r\n    // findIndex 매서드를 사용하여 true를 반환하는 첫 번째 요소의 인덱스를 담은 배열 생성\r\n    const check = checkState.findIndex((v) => v === tag);           // 선택된 태그와 일치하는 요소의 인덱스 추출하여 담는 배열\r\n    const maxLength = type === \"genre\" ? 1 : 2;                     // 선택 가능한 최대 갯수\r\n\r\n    // 사용자가 선택한 태그가 기존 선택된 태그 배열에 없는 경우\r\n\t\tif (check === -1) {\r\n      // 선택된 태그 배열의 갯수와 최대 허용 갯수 비교하여 초과일 경우 알림창 띄워주고 함수 종료\r\n      if (checkState.length > maxLength) {\r\n        alert(type === \"genre\" ? MESSAGE.OVER_SELECTED_GENRE : MESSAGE.OVER_SELECTED_KEY_WORD);\r\n        return;\r\n        // 초과하지 않을 경우 스프레드 연산자 사용하여 기존 배열 첫번째 자리에 사용자가 선택한 태그 추가 \r\n      } else {\r\n        setState([tag, ...checkState]);\r\n      }\r\n    // 사용자가 선택한 태그가 기존 선택된 태그 배열에 이미 존재하는 경우 선택 해제\r\n    } else {\r\n      // 사용자가 선택한 태그를 기존 배열에서 찾은 경우 사용자가 선택한 태그를 제외한 새로운 배열 생성\r\n      setState(checkState.filter((v) => v !== checkState[check]));\r\n    }\r\n\t};\r\n\r\n\t// 저장 후 다음 버튼 클릭 시 실행할 기능들 함수\r\n\tconst onClickNextBtn = () => {\r\n\t\tif (genre.length === 0 || keyword.length === 0) {\r\n\t\t\talert(MESSAGE.MIN_SELECT_TAG);\r\n\t\t} else {\r\n\t\t\tprops.changeState();\r\n\t\t\tprops.setTags({\r\n\t\t\t\tgenre: genre,\r\n\t\t\t\tkeyword: keyword,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<Wrapper>\r\n\t\t\t<Buttons\r\n\t\t\t\ttype={CODE.BUTTON.BASIC}\r\n\t\t\t\tbackgroundColor={COLOR.WHITE}\r\n\t\t\t\tcolor={props.color === \"#121212\" ? COLOR.WHITE : COLOR.BLACK}\r\n\t\t\t\tname={LABEL.BUTTONS.GOTONEXT}\r\n\t\t\t\tmargin={\"5px 20px 5px auto\"}\r\n\t\t\t\tonClickNextBtn={onClickNextBtn}\r\n\t\t\t/>\r\n\t\t\t<IntroMsg>{MESSAGE.SELECT_TAG_INTRO}</IntroMsg>\r\n\t\t\t<WholeBox>\r\n\t\t\t\t<TagBox>\r\n\t\t\t\t\t<GenreBox>\r\n\t\t\t\t\t\t<DivTag>{LABEL.SELECT.GENRE}</DivTag>\r\n\t\t\t\t\t\t{tag\r\n\t\t\t\t\t\t\t.filter((list) => list.group_code === \"GENRE\")\r\n\t\t\t\t\t\t\t.map((list, i) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<Buttons\r\n\t\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\t\ttype={CODE.BUTTON.TAG}\r\n\t\t\t\t\t\t\t\t\t\tname={list.code_name}\r\n\t\t\t\t\t\t\t\t\t\tbackgroundColor={`#${list.color}`}\r\n\t\t\t\t\t\t\t\t\t\tonSelectTags={() => onSelectTags(list, \"genre\")}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t</GenreBox>\r\n\t\t\t\t\t<KeywordBox>\r\n\t\t\t\t\t\t<DivTag>{LABEL.SELECT.KEY_WORD}</DivTag>\r\n\t\t\t\t\t\t{tag\r\n\t\t\t\t\t\t\t.filter((list) => list.group_code === \"KEYWORD\")\r\n\t\t\t\t\t\t\t.map((list, i) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<Buttons\r\n\t\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\t\ttype={CODE.BUTTON.TAG}\r\n\t\t\t\t\t\t\t\t\t\tname={list.code_name}\r\n\t\t\t\t\t\t\t\t\t\tbackgroundColor={`#${list.color}`}\r\n\t\t\t\t\t\t\t\t\t\tonSelectTags={() => onSelectTags(list, \"keyword\")}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t</KeywordBox>\r\n\t\t\t\t</TagBox>\r\n\t\t\t\t<SelectedTagBox>\r\n\t\t\t\t\t{genre.map((tag, i) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Buttons\r\n\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\ttype={CODE.BUTTON.TAG}\r\n\t\t\t\t\t\t\t\tname={tag.code_name}\r\n\t\t\t\t\t\t\t\tbackgroundColor={`#${tag.color}`}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t\t{keyword.map((tag, i) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Buttons\r\n\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\ttype={CODE.BUTTON.TAG}\r\n\t\t\t\t\t\t\t\tname={tag.code_name}\r\n\t\t\t\t\t\t\t\tbackgroundColor={`#${tag.color}`}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</SelectedTagBox>\r\n\t\t\t</WholeBox>\r\n\t\t</Wrapper>\r\n\t);\r\n};\r\n\r\nexport default SelectTagModal;","// React Package Module\r\nimport { useState } from \"react\";\r\n\r\n// MUI Package Module\r\nimport { Box, styled, Typography } from \"@mui/material\";\r\n\r\n// Control Component\r\nimport Buttons from \"components/controls/Button\";\r\n\r\n// Constant\r\nimport { CODE, LABEL, COLOR, MESSAGE } from \"common\";\r\n\r\n/** STYLE 정의 */\r\n// 전체 영역\r\nconst Wrapper = styled(Box)({\r\n\twidth: \"100%\",\r\n\theight: \"100%\",\r\n\tdisplay: \"flex\",\r\n\tflexDirection: \"column\",\r\n\tpadding: \"0 3%\",\r\n\tboxSizing: \"border-box\",\r\n\t// paddingTop: 40,\r\n  paddingBottom: 20,\r\n  //  boxShadow: \"inset 0 0 3px 3px blue\"\r\n\r\n});\r\n\r\n//textarea 영역\r\nconst writeNovText = (color) => {\r\n  return (\r\n    {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      boxSizing: \"borderBox\",\r\n      resize: \"none\",\r\n      outline: \"none\",\r\n      borderRadius: 10,\r\n      padding: 10,\r\n      fontSize: 17,\r\n      boxSizing: \"border-box\",\r\n      backgroundColor: color,\r\n      color: color === \"#121212\" ? \"white\" : \"black\"\r\n    }\r\n  )\r\n};\r\n\r\nconst IntroMsg = styled(Typography)({\r\n\tfontSize: 18,\r\n\tfontWeight: \"bolder\",\r\n\ttextAlign: \"center\",\r\n\tmarginBottom: 30,\r\n});\r\n\r\n/** 서브 소설 작성 후 소설 설명을 작성하는 컴포넌트 */\r\nconst WriteNovIntroModal = (props) => {\r\n\tconst [description, setDescription] = useState(\"\");     // 서브 소설 설명\r\n\r\n\tconst inputDescription = (e) => {\r\n\t\tsetDescription(e.target.value);\r\n\t};\r\n\r\n\t// 저장 후 다음 버튼 눌렀을 때 NovDetail 페이지에 있는 (서버로 보낼) 상태값에 데이터 세팅\r\n\tconst postSubDesc = () => {\r\n    if (description.length < 100) {\r\n      props.setDescription({\r\n        description: description,\r\n      });\r\n      return;\r\n    } else if (description.length === 0) {\r\n      alert(MESSAGE.ERROR.WRITE_DESCRIPTION);\r\n      return;\r\n    }\r\n    alert(MESSAGE.ERROR.DESC_INVALIDATION);\r\n    return;\r\n  };\r\n\r\n\treturn (\r\n\t\t<Wrapper>\r\n\t\t\t<Buttons\r\n\t\t\t\ttype={CODE.BUTTON.BASIC}\r\n\t\t\t\tbackgroundColor={COLOR.WHITE}\r\n\t\t\t\tcolor={props.color === \"#121212\" ? COLOR.WHITE : COLOR.BLACK}\r\n\t\t\t\tname={LABEL.BUTTONS.GOTONEXT}\r\n\t\t\t\tmargin={\"5px 20px 5px auto\"}\r\n\t\t\t\tpostSubDesc={postSubDesc}\r\n\t\t\t\tchangeState={description.length < 100 && props.changeState}\r\n\t\t\t/>\r\n\t\t\t<IntroMsg>{MESSAGE.WRITE_MAIN_NOVEL_INTRO}</IntroMsg>\r\n\t\t\t<textarea \r\n\t\t\t\tstyle={writeNovText(props.color)} \r\n\t\t\t\tonChange={inputDescription} \r\n      />\r\n\t\t</Wrapper>\r\n\t);\r\n};\r\n\r\nexport default WriteNovIntroModal;","// React Package Module\r\nimport { useState, useRef, useMemo } from \"react\";\r\n\r\n// MUI Package Module\r\nimport { Box, styled, Typography } from \"@mui/material\";\r\n\r\n// Control Component\r\nimport Buttons from \"components/controls/Button\";\r\n\r\n// Constant\r\nimport { CODE, LABEL, COLOR, MESSAGE } from \"common\";\r\n\r\n/** STYLE 정의 */\r\n// 전체 영역\r\nconst Wrapper = styled(Box)({\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  boxSizing: \"border-box\",\r\n});\r\n\r\nconst ImgBox = styled(Box)({\r\n  width: \"100%\",\r\n  height: 500,\r\n  boxSizing: \"border-box\",\r\n  marginBottom: 5,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n});\r\n\r\nconst CoverImg = styled(Box)({\r\n  width: 270,\r\n  height: 320,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  boxSizing: \"border-box\",\r\n  backgroundColor: COLOR.GREEN_TEA,\r\n  margin: \"8px auto\",\r\n  borderRadius: 20,\r\n});\r\n\r\nconst ImgDescription = styled(Typography)({\r\n  fontSize: 11,\r\n  color: COLOR.GRAY,\r\n  fontWeight: \"bold\",\r\n  margin: \"0 auto\",\r\n});\r\n\r\nconst IntroMsg = styled(Typography)({\r\n  fontSize: 18,\r\n  fontWeight: \"bolder\",\r\n  textAlign: \"center\",\r\n  marginBottom: 20,\r\n});\r\n\r\nconst fileUploaderBtn = (color) => {\r\n  return {\r\n    backgroundColor: \"transparent\",\r\n    color: color === \"#121212\" ? \"#ffffff\" : \"#121212\",\r\n    border: \"none\",\r\n    cursor: \"pointer\",\r\n    display: \"block\",\r\n    margin: \"0 auto\",\r\n    fontSize: 15,\r\n  };\r\n};\r\n\r\n/** 서브 소설 작성 후 소설 커버 이미지 업로드 하는 팝업 */\r\nconst SetNovCoverModal = (props) => {\r\n  const [selectedFileName, setSelectedFileName] = useState(\"\"); // 사용자가 선택한 프로필 사진 이름\r\n  const [previewUrl, setPreviewUrl] = useState(\"\"); // 선택한 이미지 Blob데이터의 경로 state\r\n\r\n  const imageUrl = useMemo(() => {\r\n    if (previewUrl !== \"\") {\r\n      return previewUrl;\r\n    } else {\r\n      return `${process.env.REACT_APP_COVER_IMAGE_DIRECTORY}/cover_basic.jpg`;\r\n    }\r\n  }, [previewUrl]);\r\n\r\n  // 파일 업로드 하는 input에 대한 참조를 저장하는 변수 (현재 참조 대상이 없음을 나타내기 위해 초기값 null로 세팅)\r\n  const fileInputRef = useRef(null);\r\n\r\n  const fileUploadBtn = () => {\r\n    fileInputRef.current.click();\r\n  };\r\n\r\n  const fileUpload = (e) => {\r\n    const file = e.target.files[0];\r\n\r\n    props.setCoverImage({ file: file }); // NovDetail 페이지의 redgitNovData에 이미지 데이터 세팅\r\n    setSelectedFileName(file.name); // 선택한 파일명 업데이트\r\n\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setPreviewUrl(reader.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Buttons\r\n        type={CODE.BUTTON.BASIC}\r\n        backgroundColor={COLOR.WHITE}\r\n        color={props.color === \"#121212\" ? COLOR.WHITE : COLOR.BLACK}\r\n        name={LABEL.BUTTONS.SUBMIT}\r\n        width={50}\r\n        margin={\"-10px 35px 5px auto\"}\r\n        postSubNovData={props.postSubNovData}\r\n      />\r\n      <IntroMsg>{MESSAGE.SELECT_COVER_INTRO}</IntroMsg>\r\n      <ImgBox>\r\n        <ImgDescription>{MESSAGE.BASIC_COVER_INTRO}</ImgDescription>\r\n        <CoverImg\r\n          style={{\r\n            backgroundImage: `url(${imageUrl})`,\r\n            backgroundSize: \"100% 100%\",\r\n          }}\r\n        />\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/jpg, image/jpeg, image/png\"\r\n          onChange={(e) => fileUpload(e)}\r\n          style={{ display: \"none\" }}\r\n          ref={fileInputRef}\r\n        />\r\n        {/* 사용자가 선택한 파일명 */}\r\n        {selectedFileName && (\r\n          <p style={{ fontSize: 12, textAlign: \"center\", margin: \"0 auto\" }}>\r\n            {selectedFileName}\r\n          </p>\r\n        )}\r\n        {/* 커스텀한 파일 업로더 버튼 */}\r\n        <button onClick={fileUploadBtn} style={fileUploaderBtn(props.color)}>\r\n          {LABEL.BUTTONS.UPLOAD_IMAGE}\r\n        </button>\r\n      </ImgBox>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default SetNovCoverModal;\r\n","// Control Component\r\nimport Buttons from \"components/controls/Button\";\r\n\r\n// MUI Package Module\r\nimport { Box, styled, Typography } from \"@mui/material\";\r\n\r\n// Constant\r\nimport { CODE, LABEL, COLOR, MESSAGE } from \"common\";\r\n\r\n// API\r\nimport { postData } from \"common/communication\";\r\n\r\n/** STYLE 정의 */\r\n// 전체 영역\r\nconst Wrapper = styled(Box)({\r\n\twidth: \"100%\",\r\n\tdisplay: \"flex\",\r\n\tflexDirection: \"column\",\r\n\tpadding: \"0 3%\",\r\n\tboxSizing: \"border-box\",\r\n\tmarinTop: \"-30px\",\r\n\theight: \"100%\",\r\n  paddingTop: 20\r\n});\r\n\r\nconst WholeBox = styled(Box)({\r\n\twidth: \"100%\",\r\n\theight: \"88%\",\r\n\tdisplay: \"flex\",\r\n\tgap: 20,\r\n\tboxSizing: \"border-box\",\r\n});\r\n\r\nconst MainNovBox = styled(Box)({\r\n\twidth: \"100%\",\r\n\tboxSizing: \"border-box\",\r\n\tdisplay: \"flex\",\r\n\tflexDirection: \"column\",\r\n});\r\n\r\nconst SubNovBox = styled(Box)({\r\n\twidth: \"100%\",\r\n\tboxSizing: \"border-box\",\r\n\tdisplay: \"flex\",\r\n\tflexDirection: \"column\",\r\n});\r\n\r\nconst Title = styled(Typography)({\r\n\tmarginBottom: 15,\r\n\tmarginTop: -4,\r\n\tfontSize: 18,\r\n\tfontWeight: \"bold\",\r\n});\r\n\r\nconst Content = styled(\"div\")({\r\n\tfontSize: 15\r\n});\r\n\r\n// 내용 표시되는 영역\r\nconst ContentBox = styled(Box)({\r\n  boxSizing: \"border-box\",\r\n\tborder: \"2px solid grey\",\r\n\tflex: 1,\r\n\tborder: `1px solid ${COLOR.GRAY}`,\r\n\tborderRadius: 10,\r\n\tpadding: \"8px 5px 0px 0px\",\r\n\tboxSizing: \"border-box\",\r\n  overflow: \"auto\",\r\n  height: \"100%\",\r\n});\r\n\r\nconst ScrollBox = styled(Box)({\r\n  boxSizing: \"border-box\",\r\n  overflowY: \"auto\",\r\n  height: \"100%\",\r\n  padding: \"0 3%\",\r\n\r\n\t'&::-webkit-scrollbar': {\r\n\t\twidth: 5\r\n\t},\r\n\t'&::-webkit-scrollbar-thumb': {\r\n\t\tbackgroundColor: '#aaa',\r\n\t\tborderRadius: 5,\r\n\r\n\t},\r\n\t'&::-webkit-scrollbar-track': {\r\n\t\tbackgroundColor: 'transparent',\r\n    width: 10,\r\n\t},\r\n});\r\n\r\n\r\n/** 미완성 작품 (메인 소설)에 달린 서브 소설 읽기 컴포넌트 (작품 상세 페이지 하단 테이블의 소설 제목 클릭 시 해당 팝업 띄워줌) */\r\nconst ViewSubNovModal = (props) => {\r\n\r\n\t// 투표하기 버튼 눌렀을 때 실행될 기능 함수\r\n\tconst likeSubNovel = () => {\r\n\t\tif (props.subNovelData.like_yn === \"N\") {\r\n\t\t\tif (window.confirm(MESSAGE.CONFIRM_VOTE)) {\r\n\t\t\t\tpostData(\"novel/postLikeSubNovel\", {\r\n\t\t\t\t\tsub_novel_seqno: props.subNovelData.sub_novel_seqno,\r\n\t\t\t\t\tuser_id: props.user_id,\r\n\t\t\t\t})\r\n\t\t\t\t\t.then((data) => {\r\n\t\t\t\t\t\tprops.getSubNovelData();\r\n            alert(MESSAGE.VOTED);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch((err) => {\r\n\t\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else if (props.subNovelData.like_yn === \"Y\") {\r\n\t\t\talert(MESSAGE.ALREADY_VOTED);\r\n\t\t} \r\n\t};\r\n\r\n\treturn (\r\n\t\t<Wrapper>\r\n\t\t\t{/* 서브 소설의 제목만 표시 */}\r\n\t\t\t<Title>{props.subNovelData.sub_title}</Title>\r\n\t\t\t<WholeBox>\r\n\t\t\t\t<MainNovBox>\r\n\t\t\t\t\t<ContentBox>\r\n\t\t\t\t\t\t<ScrollBox>\r\n\t\t\t\t\t\t\t<Content>\r\n\t\t\t\t\t\t\t\t{props.subNovelData &&\r\n\t\t\t\t\t\t\t\t\tprops.subNovelData.content.split(\"\\\\n\").map((line, i) => (\r\n\t\t\t\t\t\t\t\t\t\t<div key={i}>\r\n\t\t\t\t\t\t\t\t\t\t\t{line.replace(\"\\\\r\", \"\")}\r\n\t\t\t\t\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</Content>\r\n\t\t\t\t\t\t</ScrollBox>\r\n\t\t\t\t\t</ContentBox>\r\n\t\t\t\t</MainNovBox>\r\n\t\t\t\t<SubNovBox>\r\n\t\t\t\t\t<ContentBox>\r\n\t\t\t\t\t\t<ScrollBox>\r\n\t\t\t\t\t\t\t<Content>\r\n\t\t\t\t\t\t\t\t{props.subNovelData &&\r\n\t\t\t\t\t\t\t\t\tprops.subNovelData.sub_content.split(\"\\\\n\").map((line, i) => (\r\n\t\t\t\t\t\t\t\t\t\t<div key={i}>\r\n\t\t\t\t\t\t\t\t\t\t\t{line.replace(\"\\\\r\", \"\")}\r\n\t\t\t\t\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</Content>\r\n\t\t\t\t\t\t</ScrollBox>\r\n\t\t\t\t\t</ContentBox>\r\n\t\t\t\t</SubNovBox>\r\n\t\t\t</WholeBox>\r\n\t\t\t{props.subNovelData.created_user !== props.user_id &&\r\n\t\t\t\t!props.mainNovel.complete_seqno && (\r\n\t\t\t\t\t<Buttons\r\n\t\t\t\t\t\ttype={CODE.BUTTON.BASIC}\r\n\t\t\t\t\t\tbackgroundColor={COLOR.WHITE}\r\n\t\t\t\t\t\tcolor={props.color === \"#121212\" ? COLOR.WHITE : COLOR.BLACK}\r\n\t\t\t\t\t\tname={LABEL.BUTTONS.LIKE_BTN}\r\n\t\t\t\t\t\tfontSize={15}\r\n\t\t\t\t\t\tmargin={\"0px -5px 0px auto\"}\r\n\t\t\t\t\t\tlikeSubNovel={likeSubNovel}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t</Wrapper>\r\n\t);\r\n};\r\n\r\nexport default ViewSubNovModal;","// React Package Module\r\nimport { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\n// MUI Package Module\r\nimport { Box, Typography, styled } from \"@mui/material\";\r\n\r\n// Content Component\r\nimport NovelInfo from \"components/contents/NovelInfo\";\r\n\r\n// Layout Component\r\nimport BasicTable from \"components/layout/BasicTable\";\r\n\r\n// Control Component\r\nimport Buttons from \"components/controls/Button\";\r\n\r\n// Modal Component\r\nimport ModalModal from \"components/popup/ModalModal\";\r\nimport ViewCompleteNovModal from \"components/popup/ViewCompleteNovModal\";\r\nimport ViewIncompleteNovModal from \"components/popup/ViewIncompleteNovModal\";\r\nimport WriteSubNovModal from \"components/popup/WriteSubNovModal\";\r\nimport AuthorDetailModal from \"components/popup/AuthorDetailModal\";\r\nimport SelectTagModal from \"components/popup/SelectTagModal\";\r\nimport WriteNovIntroModal from \"components/popup/WriteNovIntroModal\";\r\nimport SetNovCoverModal from \"components/popup/SetNovCoverModal\";\r\nimport ViewSubNovModal from \"components/popup/ViewSubNovModal\";\r\n\r\n// Constant\r\nimport { CODE, LABEL, MESSAGE } from \"common\";\r\n\r\n// util\r\nimport {\r\n\tmodalWidth,\r\n\tmodalHeight,\r\n\tmodalColorMode,\r\n\tcompressImage,\r\n} from \"common/util\";\r\n\r\n// API\r\nimport { getData, postData } from \"common/communication\";\r\n\r\n/** 영역 STYLE 정의 */\r\n// 전체 영역\r\nconst Wrapper = styled(Box)({\r\n\twidth: \"99vw\",\r\n\theight: \"99vh\",\r\n\tdisplay: \"flex\",\r\n\tflexDirection: \"column\",\r\n\tpadding: \"0px 100px\",\r\n\tboxSizing: \"border-box\",\r\n});\r\n\r\n// 소설 커버 이미지, 소설 목록 게시판 영역\r\nconst NovDetailBox = styled(Box)({\r\n\theight: \"100%\",\r\n\tdisplay: \"flex\",\r\n\tflexWrap: \"wrap\",\r\n});\r\n\r\n// 소설 커버 이미지 영역\r\n// const NovCoverBox = styled(Box)({\r\n// \tmarginRight: 20,\r\n// });\r\n\r\n// 소설 커버 이미지 영역\r\nconst NovelCover = styled(Box)({\r\n\twidth: 200,\r\n\theight: 300,\r\n\tmarginTop: 5,\r\n\tborderRadius: 15,\r\n\tbackgroundColor: \"pink\",\r\n\tbackgroundSize: \"cover\",\r\n\tbackgroundRepeat: \"no-repeat\",\r\n});\r\n\r\n// 소설 게시판 영역\r\nconst NovBoardBox = styled(Box)({\r\n\theight: \"70%\",\r\n\tdisplay: \"flex\",\r\n\tflexDirection: \"column\",\r\n\tpadding: \"10px\",\r\n});\r\n\r\n// 소설 게시판 갯수 및 필터 버튼 영역\r\nconst NovBoardInfoBox = styled(Box)({\r\n\theight: 20,\r\n\tdisplay: \"flex\",\r\n\tmarginBottom: 10,\r\n});\r\n\r\n// 소설 게시판 갯수\r\nconst NovelCount = styled(Typography)({\r\n\theight: \"5%\",\r\n\tmarginRight: \"auto\",\r\n\tmarginLeft: 10,\r\n});\r\n\r\n// 소설 게시판 필터 버튼 영역\r\nconst FilterBox = styled(Box)({\r\n\tmarginRight: 10,\r\n});\r\n\r\n/** 작품 상세 페이지 (NovelCard 컴포넌트 클릭 시 해당 페이지로 이동) */\r\nconst NovDetail = () => {\r\n\t// 메인 페이지에서 넘겨받은 클릭한 소설의 상세 정보\r\n\t// navigate 메서드로 넘긴 props를 받는 방법\r\n\tconst location = useLocation();\r\n\r\n\tconst novel = location.state.props;\r\n\r\n\t/** STATE 정의\r\n\t * modal: Modal 팝업 상태\r\n\t * popup:  팝업 내용 변경\r\n\t * authorId: 소설 정보 헤더에서 클릭한 작가 ID\r\n\t * authorNickName: 소설 정보 헤더에서 클릭한 작가 Nickname\r\n\t * subNovelData: 메인 소설에 연결된 서브 소설들 데이터(BasicTable에 넘김)\r\n\t * mainNovel: 이어쓰기 팝업에서 띄워져야 할 메인 소설의 데이터(title, content, seqno가 담겨있음)\r\n\t * isPopular: 서브 소설을 담은 table에 인기순인지 최신순인지 알려주기 위한 상태\r\n\t * regditNovData: 이어쓰기 팝업에서 입력한 서브소설 데이터(t_sub_novel_mgt 테이블에 들어갈 데이터)\r\n\t */\r\n\tconst [modal, setModal] = useState(false); // 모달 open 여부\r\n\tconst [popup, setModal] = useState(\"\"); // popup 상태값\r\n\tconst [authorId, setAuthorId] = useState(\"\"); // 소설 정보 헤더에서 클릭한 작가 아이디\r\n\tconst [authorNickName, setAuthorNickName] = useState(\"\"); // 소설 정보 헤더에서 클릭한 작가 닉네임\r\n\tconst [subNovelData, setSubNovelData] = useState([]); // 메인 소설에 연결된 서브 소설들 데이터(BasicTable에 넘김)\r\n\tconst [mainNovel, setMainNovel] = useState({}); // 이어쓰기 팝업에서 띄워져야 할 메인 소설의 데이터(title, content, seqno가 담겨있음)\r\n\tconst [novelIdx, setNovelIdx] = useState(0); // 클릭한 소설의 인덱스\r\n\tconst [isPopular, setIsPopular] = useState(false); // 서브 소설을 담은 table에 인기순인지 최신순인지 알려주기 위한 상태\r\n\tconst [profile, setProfile] = useState(\r\n\t\tJSON.parse(localStorage.getItem(\"profile\"))\r\n\t); // 로컬스토리지에 저장된 사용자 정보\r\n\tconst [isLike, setIsLike] = useState(false); // 노벨카드에서 소설 찜 상태 변경 여부 공유받기 위한 상태\r\n\tconst [color, setColor] = useState(\"#ffffff\"); // 배경색 모드\r\n\r\n\t// 서버에 post하기 위한 데이터\r\n\tconst [regditNovData, setRegditNovData] = useState({\r\n\t\tmain_novel_seqno: null,\r\n\t\ttitle: null,\r\n\t\tcontent: null,\r\n\t\tgenre_1: null,\r\n\t\tgenre_2: null,\r\n\t\tkeyword_1: null,\r\n\t\tkeyword_2: null,\r\n\t\tkeyword_3: null,\r\n\t\tdescription: null,\r\n\t\tfile: \"cover_basic.jpg\",\r\n\t\tcreated_user: profile.login_id,\r\n\t});\r\n\r\n\t// 인기순 (like_count가 많은 순으로 정렬할 서브 소설 배열)\r\n\tconst [popularOrder, setPopularOrder] = useState([]);\r\n\r\n\t// 위 popularOrder 배열 초깃값으로 subNovelData를 넣었더니 반영되지 않는 문제 발생하여 useEffect로 처리\r\n\tuseEffect(() => {\r\n\t\tsetPopularOrder([...subNovelData]);\r\n\t}, [subNovelData]);\r\n\r\n\t// 인기순 Filtering\r\n\tconst sortPopular = () => {\r\n\t\tsetIsPopular(true);\r\n\t\tpopularOrder.sort((a, b) => b.sub_like_count - a.sub_like_count);\r\n\t};\r\n\r\n\t// 소설에 딸린 서브 소설 가져오기\r\n\tconst getSubNovelData = () => {\r\n\t\tgetData(\"novel/getSubNovel\", {\r\n\t\t\tmain_novel_seqno: novel.main_seqno,\r\n\t\t\tuser_id: profile.login_id,\r\n\t\t})\r\n\t\t\t.then(function (data) {\r\n\t\t\t\tsetSubNovelData(data);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\t};\r\n\r\n\t// 서브소설 데이터 조회\r\n\tuseEffect(() => {\r\n\t\tgetSubNovelData();\r\n\t}, [novel.main_seqno]);\r\n\r\n\t/** Modal OPEN/CLOSE */\r\n\tconst showModal = () => {\r\n\t\tsetModal(true);\r\n\t};\r\n\tconst closeModal = () => {\r\n\t\tsetModal(false);\r\n\t};\r\n\r\n\t/** 각 팝업에서 받아온 데이터를 NovDetail 페이지 state에 세팅 */\r\n\t// WriteSubNovModal 입력하여 받아온 title, content 세팅 함수\r\n\tconst setTitleContent = (data) => {\r\n\t\tsetRegditNovData((prevState) => ({\r\n\t\t\t...prevState,\r\n\t\t\ttitle: data.title === \"\" ? novel.title : data.title, // 서브 소설 타이틀이 변경되지 않았을 경우 메인 소설 타이틀 데이터 세팅\r\n\t\t\tcontent: data.content,\r\n\t\t\tmain_novel_seqno: data.main_novel_seqno,\r\n\t\t}));\r\n\t};\r\n\r\n\t// SelectTagModal에서 받아온 genre, keyword 세팅 함수\r\n\tconst setTags = (data) => {\r\n\t\tsetRegditNovData((prevState) => ({\r\n\t\t\t...prevState,\r\n\t\t\tgenre_1: data.genre[0].code,\r\n\t\t\tgenre_2: data.genre[1] && data.genre[1].code,\r\n\t\t\tkeyword_1: data.keyword[0].code,\r\n\t\t\tkeyword_2: data.keyword[1] && data.keyword[1].code,\r\n\t\t\tkeyword_3: data.keyword[2] && data.keyword[2].code,\r\n\t\t}));\r\n\t};\r\n\r\n\t// WriteNovIntroModal 받아온 description 세팅 함수\r\n\tconst setDescription = (data) => {\r\n\t\tsetRegditNovData((prevState) => ({\r\n\t\t\t...prevState,\r\n\t\t\tdescription: data.description,\r\n\t\t}));\r\n\t};\r\n\r\n\t// SelectTagModal 받아온 description 세팅 함수\r\n\tconst setCoverImage = (data) => {\r\n\t\tsetRegditNovData((prevState) => ({\r\n\t\t\t...prevState,\r\n\t\t\tfile: data.file,\r\n\t\t}));\r\n\t};\r\n\r\n\t// 서브 소설 데이터 서버 전송\r\n\tconst postSubNovData = async () => {\r\n    let subNovData;\r\n\r\n    // 커버 이미지 선택할 경우 폼 데이터 생성\r\n    if (regditNovData.file !== \"cover_basic.jpg\") {\r\n      // 선택된 이미지 파일의 확장자명이 jpeg, jpg, png가 아닐 경우 경고문 띄우고 함수 종료\r\n      const ext = regditNovData.file.type.split(\"/\")[1];\r\n      const allowList = [\"jpeg\", \"jpg\", \"png\"];\r\n      if (!allowList.includes(ext)) {\r\n        alert(MESSAGE.ERROR.CHECK_EXT);\r\n        return;\r\n      }\r\n\r\n      // 이미지 압축\r\n      const resizingImg = await compressImage(regditNovData.file);\r\n      setRegditNovData((prev) => ({\r\n        ...prev,\r\n        file: resizingImg,\r\n      }));\r\n\r\n      const formData = new FormData();\r\n\r\n      Object.keys(regditNovData).forEach((key) => {\r\n        formData.append(key, regditNovData[key]);\r\n      });\r\n\r\n      subNovData = formData;\r\n\r\n      // 커버 이미지 선택없이 나머지 데이터만 전송할 경우\r\n    } else {\r\n      subNovData = regditNovData;\r\n    }\r\n\r\n    postData(\"novel/postSubNovel\", subNovData)\r\n      .then((msg) => {\r\n        alert(msg);\r\n        closeModal();\r\n        getSubNovelData();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n\t// 소설 마감 기한 알려주는 디데이 카운터 함수\r\n\tconst novelDdayCounter = () => {\r\n\t\t// 문자열로 뽑히는 created_date를 Date 객체로 변환\r\n\t\tconst createdDate = new Date(novel.created_date);\r\n\r\n\t\t// 마감일은 소설의 작성일 기준 30일 후로 설정\r\n\t\tconst dueDate = new Date(createdDate.setDate(createdDate.getDate() + 30));\r\n\r\n\t\t// 현재 시간(PC 설정 관계없이 서울 시간으로 고정)\r\n\t\tconst krCurr = new Date(\r\n\t\t\tnew Date().getTime() +\r\n\t\t\t\tnew Date().getTimezoneOffset() * 60 * 1000 +\r\n\t\t\t\t9 * 60 * 60 * 1000\r\n\t\t);\r\n\r\n\t\t// 현재 날짜와 마감일의 차이를 밀리초 단위로 변환하여 계산\r\n\t\tlet leftTime = dueDate.getTime() - krCurr.getTime();\r\n\r\n\t\t// 밀리초를 일 단위로 변환\r\n\t  let leftDay = Math.ceil(leftTime / (1000 * 60 * 60 * 24)); // 1초 = 1000밀리초, 1분은 60초, 1시간은 60분, 1일은 24시간\r\n    \r\n    if (leftDay === 0) {\r\n      return MESSAGE.D_DAY\r\n    } else if (leftDay < 0 || novel.complete_seqno) {\r\n      return MESSAGE.DDAY_COMPLETE \r\n    } else {\r\n      return MESSAGE.DDAY_COUNT + leftDay\r\n    }\r\n\t};\r\n\r\n\t// 팝업 상태값 변경\r\n\tconst popupChange = () => {\r\n\t\tif (popup === \"viewComNov\") {\r\n\t\t\treturn (\r\n\t\t\t\t<ViewCompleteNovModal\r\n\t\t\t\t\tcomplete_seqno={novel.complete_seqno}\r\n\t\t\t\t\tcolor={color}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t} else if (popup === \"viewIncomNov\") {\r\n\t\t\treturn (\r\n\t\t\t\t<ViewIncompleteNovModal\r\n\t\t\t\t\tchangeState={() => setModal(\"writeNov\")}\r\n\t\t\t\t\tmain_seqno={novel.main_seqno}\r\n\t\t\t\t\tsetMainNovel={(novel) => setMainNovel(novel)}\r\n\t\t\t\t\tlogin_id={profile.login_id}\r\n\t\t\t\t\tcolor={color}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t} else if (popup === \"writeNov\") {\r\n\t\t\treturn (\r\n\t\t\t\t<WriteSubNovModal\r\n\t\t\t\t\tmainNovel={mainNovel}\r\n\t\t\t\t\tchangeState={() => setModal(\"selectTag\")}\r\n\t\t\t\t\tsetTitleContent={(data) => setTitleContent(data)}\r\n\t\t\t\t\tcolor={color}\r\n\t\t\t\t\t// 현재 data의 형태는 WriteSubNovModal에서 받은 { title: title, content: content }\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t} else if (popup === \"authorDetail\") {\r\n\t\t\treturn (\r\n\t\t\t\t<AuthorDetailModal\r\n\t\t\t\t\tauthorId={authorId}\r\n\t\t\t\t\tauthorNickName={authorNickName}\r\n\t\t\t\t\tcloseModal={closeModal}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t} else if (popup === \"selectTag\") {\r\n\t\t\treturn (\r\n\t\t\t\t<SelectTagModal\r\n\t\t\t\t\tchangeState={() => setModal(\"novIntro\")}\r\n\t\t\t\t\tsetTags={(data) => setTags(data)}\r\n\t\t\t\t\tcolor={color}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t} else if (popup === \"novIntro\") {\r\n\t\t\treturn (\r\n\t\t\t\t<WriteNovIntroModal\r\n\t\t\t\t\tsetDescription={setDescription}\r\n\t\t\t\t\tchangeState={() => setModal(\"novCover\")}\r\n\t\t\t\t\tcolor={color}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t} else if (popup === \"novCover\") {\r\n\t\t\treturn (\r\n\t\t\t\t<SetNovCoverModal\r\n\t\t\t\t\tsetCoverImage={(data) => setCoverImage(data)}\r\n\t\t\t\t\tpostSubNovData={postSubNovData}\r\n\t\t\t\t\tcolor={color}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t} else if (popup === \"viewSubNov\") {\r\n\t\t\treturn (\r\n\t\t\t\t<ViewSubNovModal\r\n\t\t\t\t\t// 컴포넌트로 넘겨줄 때 서브 소설 전체가 아닌 클릭한 소설의 고유 index 상태값을 넣어 인덱싱 하여 넘김\r\n\t\t\t\t\tsubNovelData={subNovelData[novelIdx]}\r\n\t\t\t\t\tmainNovel={novel}\r\n\t\t\t\t\tuser_id={profile.login_id}\r\n\t\t\t\t\tsetIsLike={setIsLike}\r\n\t\t\t\t\tgetSubNovelData={getSubNovelData}\r\n\t\t\t\t\tcolor={color}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<Wrapper>\r\n\t\t\t{/* 소설 정보 헤더 영역 */}\r\n\t\t\t<NovelInfo\r\n\t\t\t\t// 소설 정보\r\n\t\t\t\ttitle={\r\n\t\t\t\t\tnovel.complete_novel_title ? novel.complete_novel_title : novel.title\r\n\t\t\t\t}\r\n\t\t\t\tcomplete_seqno={novel.complete_seqno}\r\n\t\t\t\tdescription={novel.description}\r\n\t\t\t\tmain_author_id={novel.main_author_id}\r\n\t\t\t\tsub_author_id={novel.sub_author_id}\r\n\t\t\t\tmain_author_nickname={novel.main_author_nickname}\r\n\t\t\t\tsub_author_nickname={novel.sub_author_nickname}\r\n\t\t\t\tlike_count={novel.like_count}\r\n\t\t\t\tcreated_date={novel.created_date}\r\n\t\t\t\tcreated_user={novel.created_user}\r\n\t\t\t\tuser_nickname={novel.user_nickname}\r\n\t\t\t\t// 페이지 및 팝업 상태 변경\r\n\t\t\t\tshowModal={showModal}\r\n\t\t\t\tsetModal={(state) => setModal(state)}\r\n\t\t\t\tsetAuthorId={(id) => setAuthorId(id)}\r\n\t\t\t\tsetAuthorNickName={(nickName) => setAuthorNickName(nickName)}\r\n\t\t\t\tnovelDdayCounter={novelDdayCounter()}\r\n\t\t\t/>\r\n\r\n\t\t\t{/* 소설 이미지 및 서브 소설 정보 영역 */}\r\n\t\t\t<NovDetailBox>\r\n\t\t\t\t{/* <NovCoverBox> */}\r\n\t\t\t\t<NovelCover\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tbackgroundImage: `url(${\r\n\t\t\t\t\t\t\tprocess.env.REACT_APP_COVER_IMAGE_DIRECTORY\r\n\t\t\t\t\t\t}/${encodeURIComponent(novel.cover_image)})`,\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t{/* </NovCoverBox> */}\r\n\t\t\t\t<NovBoardBox>\r\n\t\t\t\t\t<NovBoardInfoBox>\r\n\t\t\t\t\t\t{subNovelData.length !== 0 ? (\r\n\t\t\t\t\t\t\t<NovelCount>\r\n\t\t\t\t\t\t\t\t{subNovelData.length}\r\n\t\t\t\t\t\t\t\t{MESSAGE.BOARD_COUNT}\r\n\t\t\t\t\t\t\t</NovelCount>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<NovelCount>{MESSAGE.WRITE_FIRST_NOVEL}</NovelCount>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<FilterBox>\r\n\t\t\t\t\t\t\t<Buttons\r\n\t\t\t\t\t\t\t\ttype={CODE.BUTTON.BASIC}\r\n\t\t\t\t\t\t\t\tname={LABEL.BUTTONS.LATEST}\r\n\t\t\t\t\t\t\t\theight={10}\r\n\t\t\t\t\t\t\t\tsortLatest={() => setIsPopular(false)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<Buttons\r\n\t\t\t\t\t\t\t\ttype={CODE.BUTTON.BASIC}\r\n\t\t\t\t\t\t\t\tname={LABEL.BUTTONS.POPULAR}\r\n\t\t\t\t\t\t\t\theight={10}\r\n\t\t\t\t\t\t\t\tsortPopular={sortPopular}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</FilterBox>\r\n\t\t\t\t\t</NovBoardInfoBox>\r\n\t\t\t\t\t<BasicTable\r\n\t\t\t\t\t\tsubNovelData={subNovelData}\r\n\t\t\t\t\t\tchangeState={() => setModal(\"viewSubNov\")}\r\n\t\t\t\t\t\tshowModal={showModal}\r\n\t\t\t\t\t\t// table 안의 index를 고유 키 값으로 사용하기 위해 props로 전달\r\n\t\t\t\t\t\tsetNovelIdx={setNovelIdx}\r\n\t\t\t\t\t\tpopularOrder={popularOrder}\r\n\t\t\t\t\t\tisPopular={isPopular}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</NovBoardBox>\r\n\t\t\t</NovDetailBox>\r\n\r\n\t\t\t{/* 모달 팝업 영역 */}\r\n\t\t\t<ModalModal\r\n\t\t\t\tfullWidth\r\n\t\t\t\topen={modal}\r\n\t\t\t\twidth={modalWidth(popup)}\r\n\t\t\t\tonClose={closeModal}\r\n\t\t\t\theight={modalHeight(popup)}\r\n\t\t\t\tmode={modalColorMode(popup)}\r\n\t\t\t\tsetColor={(data) => setColor(data)}\r\n\t\t\t\tsetColorInit={() => setColor(\"#ffffff\")}\r\n\t\t\t>\r\n\t\t\t\t{popupChange()}\r\n\t\t\t</ModalModal>\r\n\t\t</Wrapper>\r\n\t);\r\n};\r\n\r\nexport default NovDetail;"],"names":["Whole","styled","Box","width","height","display","margin","paddingTop","InfoBox","flexDirection","DateBox","flexGrow","TitleBox","minHeight","marginBottom","AuthorBox","DescriptionBox","marginTop","Title","Typography","fontSize","fontWeight","Author","cursor","Description","color","COLOR","GRAY","DateInfo","marginLeft","NovelViewBox","flex","props","_jsxs","children","_jsx","title","main_author_id","_Fragment","onClick","showModal","setModal","setAuthorId","setAuthorNickName","main_author_nickname","sub_author_id","sub_author_nickname","created_user","user_nickname","description","replace","novelDdayCounter","undefined","complete_seqno","Icons","type","CODE","ICON","SEARCH","Buttons","BUTTON","BASIC","name","LABEL","BUTTONS","VIEWNOVEL","TableContainer","component","Paper","sx","boxShadow","border","Table","minWidth","TableBody","subNovelData","isPopular","map","novel","i","TableRow","TableCell","setNovelIdx","changeState","align","size","textAlign","sub_title","sub_like_count","popularOrder","Wrapper","padding","boxSizing","Content","whiteSpace","ContentBox","overflow","paddingRight","backgroundColor","borderRadius","completeNovel","setCompleteNovel","useState","useEffect","getData","then","data","catch","err","console","log","complete_novel_title","complete_novel_content","replaceAll","HeaderBox","flexShrink","ScrollBox","background","mainNovel","setMainNovel","novel_seqno","main_seqno","mainData","content","login_id","WHITE","BLACK","GOTOWRITE","split","line","marinTop","WholeBox","gap","ViewBox","concat","WriteBox","CountText","marginRight","setTitle","setContent","contentCount","setContentCount","Inputs","fullWidth","defaultValue","onChange","e","target","value","GOTONEXT","postSubNovel","length","alert","MESSAGE","ERROR","TITLE_INVALIDATION","setTitleContent","main_novel_seqno","WRITE_CONTENT","style","resize","outline","maxLength","AuthorName","AuthorMessage","paddingLeft","backgroundImage","process","user_image","backgroundSize","authorNickName","justifyContent","NovelCardBox","flexWrap","IsDataInfo","authorNovelData","setAuthorNovelData","userImg","setUserImg","profile","setProfile","JSON","parse","localStorage","getItem","getNovelData","authorId","novel_data","navigate","useNavigate","AuthorInfo","list","NovelCard","created_date","user_id","pick_yn","cover_image","state","closeModal","NO_INCOMPLETE_NOV","TagBox","SelectedTagBox","GenreBox","KeywordBox","IntroMsg","DivTag","tag","setTag","genre","setGenre","keyword","setKeyword","onSelectTags","checkState","setState","check","findIndex","v","OVER_SELECTED_GENRE","OVER_SELECTED_KEY_WORD","filter","onClickNextBtn","MIN_SELECT_TAG","setTags","SELECT_TAG_INTRO","SELECT","GENRE","group_code","TAG","code_name","KEY_WORD","paddingBottom","setDescription","postSubDesc","DESC_INVALIDATION","WRITE_DESCRIPTION","WRITE_MAIN_NOVEL_INTRO","ImgBox","CoverImg","GREEN_TEA","ImgDescription","selectedFileName","setSelectedFileName","previewUrl","setPreviewUrl","imageUrl","useMemo","fileInputRef","useRef","SUBMIT","postSubNovData","SELECT_COVER_INTRO","BASIC_COVER_INTRO","accept","file","files","setCoverImage","reader","FileReader","onloadend","result","readAsDataURL","fileUpload","ref","fileUploadBtn","current","click","UPLOAD_IMAGE","MainNovBox","SubNovBox","overflowY","sub_content","LIKE_BTN","likeSubNovel","like_yn","window","confirm","CONFIRM_VOTE","postData","sub_novel_seqno","getSubNovelData","VOTED","ALREADY_VOTED","NovDetailBox","NovelCover","backgroundRepeat","NovBoardBox","NovBoardInfoBox","NovelCount","FilterBox","NovDetail","useLocation","modal","setModal","popup","setSubNovelData","novelIdx","setIsPopular","isLike","setIsLike","setColor","regditNovData","setRegditNovData","genre_1","genre_2","keyword_1","keyword_2","keyword_3","setPopularOrder","prevState","async","subNovData","ext","includes","CHECK_EXT","resizingImg","compressImage","prev","formData","FormData","Object","keys","forEach","key","append","msg","NovelInfo","like_count","id","nickName","createdDate","Date","dueDate","setDate","getDate","krCurr","getTime","getTimezoneOffset","leftTime","leftDay","Math","ceil","D_DAY","DDAY_COMPLETE","DDAY_COUNT","encodeURIComponent","BOARD_COUNT","WRITE_FIRST_NOVEL","LATEST","sortLatest","POPULAR","sortPopular","sort","a","b","BasicTable","ModalModal","open","modalWidth","onClose","modalHeight","mode","modalColorMode","setColorInit","ViewCompleteNovModal","ViewIncompleteNovModal","WriteSubNovModal","AuthorDetailModal","SelectTagModal","code","WriteNovIntroModal","SetNovCoverModal","ViewSubNovModal"],"sourceRoot":""}